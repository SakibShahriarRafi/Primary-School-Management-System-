
import java.sql.*;
import java.text.DateFormatSymbols;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author sakib
 */
public class framePaymentbyADMIN extends javax.swing.JFrame {

    /**
     * Creates new form framePaymentbyADMIN
     */
    public framePaymentbyADMIN() {
        initComponents();
        setSize(1000, 800);
        comboSelectPerson.setSelectedIndex(0);
        monthChooser.setMonth(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        tfAccountNo = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        tfID = new javax.swing.JTextField();
        tfPaidAmmount = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        btnSubmit = new javax.swing.JButton();
        comboSelectPerson = new javax.swing.JComboBox<>();
        monthChooser = new com.toedter.calendar.JMonthChooser();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 25)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Payment by ADMIN");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(338, 51, 270, 51));

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(57, 41, 100, 51));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Account No:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(125, 148, 149, 42));

        tfAccountNo.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        tfAccountNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfAccountNoActionPerformed(evt);
            }
        });
        getContentPane().add(tfAccountNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(286, 148, 531, 50));

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("ID:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(336, 293, 115, 40));

        tfID.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        getContentPane().add(tfID, new org.netbeans.lib.awtextra.AbsoluteConstraints(456, 293, 214, 40));

        tfPaidAmmount.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        getContentPane().add(tfPaidAmmount, new org.netbeans.lib.awtextra.AbsoluteConstraints(491, 426, 179, 40));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Paid Ammount:");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(336, 426, 150, 40));

        btnSubmit.setBackground(new java.awt.Color(102, 204, 0));
        btnSubmit.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        btnSubmit.setText("SUBMIT");
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });
        getContentPane().add(btnSubmit, new org.netbeans.lib.awtextra.AbsoluteConstraints(404, 611, 216, 64));

        comboSelectPerson.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        comboSelectPerson.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Student", "Teacher", "Staff" }));
        getContentPane().add(comboSelectPerson, new org.netbeans.lib.awtextra.AbsoluteConstraints(399, 227, 210, 36));
        getContentPane().add(monthChooser, new org.netbeans.lib.awtextra.AbsoluteConstraints(456, 364, 130, 30));

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Select Month:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(336, 364, 115, 30));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/ComnmonBG.png"))); // NOI18N
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1000, 810));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void tfAccountNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfAccountNoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfAccountNoActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        frameManagePaymentbyADMIN managePaymentbyADMIN = new frameManagePaymentbyADMIN();
        managePaymentbyADMIN.setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
        // TODO add your handling code here:
        String inputAccountNo = tfAccountNo.getText();
        int selectedPerson = comboSelectPerson.getSelectedIndex();
        int personId = Integer.parseInt(tfID.getText().trim());
        double paidAmmount = Double.valueOf(tfPaidAmmount.getText());
        String monthName = new DateFormatSymbols().getMonths()[monthChooser.getMonth()];

        String jdbcUrl = "jdbc:sqlserver://localhost:1433;databaseName=RainbowPrimarySchool";
        String username = "sa";
        String password = "123456";

        if (selectedPerson == 0) {// for student *****************************************************************************************************************************

            try (Connection connection = DriverManager.getConnection(jdbcUrl, username, password)) {
                // Prepare the SQL SELECT query
                String sqlQuery = "SELECT studentAccountNo,PaymentScale,studentPayableMoney FROM StudentTable WHERE studentId = ?";

                try (PreparedStatement statement = connection.prepareStatement(sqlQuery)) {
                    // Set the student ID parameter in the query
                    statement.setInt(1, personId);

                    // Execute the query and get the result set
                    ResultSet resultSet = statement.executeQuery();

                    // Check if a matching student is found
                    if (resultSet.next()) {
                        String accountNo = resultSet.getString("studentAccountNo");
                        double studentPaymentScale = resultSet.getDouble("PaymentScale");
                        double StudentPayableMoney = resultSet.getDouble("studentPayableMoney");
                        if (inputAccountNo.equalsIgnoreCase(accountNo)) {

                            try (Connection connection2 = DriverManager.getConnection(jdbcUrl, username, password)) {
                                // Prepare the SQL INSERT query
                                String sqlQuery2 = "INSERT INTO TransactionTable (studentID,  account_no, paidAmount, payable_money,  transactionMonth, transactiondate) VALUES ( ?, ?, ?, ?, ?, ?)";

                                try (PreparedStatement statement2 = connection2.prepareStatement(sqlQuery2)) {
                                    // Set the values for the parameters in the query
                                    statement2.setInt(1, personId);
                                    statement2.setString(2, accountNo);
                                    statement2.setDouble(3, paidAmmount);
                                    statement2.setDouble(4, studentPaymentScale - paidAmmount);
                                    StudentPayableMoney = StudentPayableMoney + (studentPaymentScale - paidAmmount);
                                    statement2.setString(5, monthName);
                                    java.sql.Date currentDate = new java.sql.Date(System.currentTimeMillis());
                                    statement2.setDate(6, currentDate);

                                    // Execute the INSERT query
                                    int rowsAffected = statement2.executeUpdate();

                                    if (rowsAffected > 0) {
                                        JOptionPane.showMessageDialog(framePaymentbyADMIN.this, "Transaction Successful");
                                        tfAccountNo.setText(null);
                                        tfID.setText(null);
                                        comboSelectPerson.setSelectedIndex(0);
                                        monthChooser.setMonth(0);
                                        tfPaidAmmount.setText(null);
                                    } else {
                                        JOptionPane.showMessageDialog(framePaymentbyADMIN.this, "Failed to insert transaction data.");
                                    }
                                }
                            } catch (SQLException e) {
                                e.printStackTrace();
                            }

                            try (Connection connection3 = DriverManager.getConnection(jdbcUrl, username, password)) {
                                // Prepare the SQL UPDATE query
                                String sqlQuery3 = "UPDATE StudentTable SET studentPayableMoney = ? WHERE studentId = ?";

                                try (PreparedStatement statement3 = connection3.prepareStatement(sqlQuery3)) {
                                    // Set the new payable money and student ID as parameters in the query
                                    statement3.setDouble(1, StudentPayableMoney);
                                    statement3.setInt(2, personId);

                                    // Execute the UPDATE query
                                    statement3.executeUpdate();

                                }
                            } catch (SQLException e) {
                                e.printStackTrace();
                            }

                        } else {
                            JOptionPane.showMessageDialog(framePaymentbyADMIN.this, "account no and user id does not match");
                        }
                    } else {
                        //
                    }
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }

            // if selectedperson ==0  **************************************************************************************************************************
        } else if (selectedPerson == 1) { // for teacher ******************************************************************************************************

            try (Connection connection = DriverManager.getConnection(jdbcUrl, username, password)) {
                // Prepare the SQL SELECT query
                String sqlQuery = "SELECT teacherAccountNo,teacherSalaryScale,teacherPayableMoney FROM TeacherTable WHERE teacherId = ?";

                try (PreparedStatement statement = connection.prepareStatement(sqlQuery)) {
                    // Set the student ID parameter in the query
                    statement.setInt(1, personId);

                    // Execute the query and get the result set
                    ResultSet resultSet = statement.executeQuery();

                    // Check if a matching student is found
                    if (resultSet.next()) {
                        String accountNo = resultSet.getString("teacherAccountNo");
                        double studentPaymentScale = resultSet.getDouble("teacherSalaryScale");
                        double TeacherPayableMoney = resultSet.getDouble("teacherPayableMoney");
                        if (inputAccountNo.equalsIgnoreCase(accountNo)) {

                            try (Connection connection2 = DriverManager.getConnection(jdbcUrl, username, password)) {
                                // Prepare the SQL INSERT query
                                String sqlQuery2 = "INSERT INTO TransactionTable (teacherId,  account_no, paidAmount, payable_money,  transactionMonth, transactiondate) VALUES ( ?, ?, ?, ?, ?, ?)";

                                try (PreparedStatement statement2 = connection2.prepareStatement(sqlQuery2)) {
                                    // Set the values for the parameters in the query
                                    statement2.setInt(1, personId);
                                    statement2.setString(2, accountNo);
                                    statement2.setDouble(3, paidAmmount);
                                    statement2.setDouble(4, studentPaymentScale - paidAmmount);
                                    TeacherPayableMoney = TeacherPayableMoney + (studentPaymentScale - paidAmmount);
                                    statement2.setString(5, monthName);
                                    java.sql.Date currentDate = new java.sql.Date(System.currentTimeMillis());
                                    statement2.setDate(6, currentDate);

                                    // Execute the INSERT query
                                    int rowsAffected = statement2.executeUpdate();

                                    if (rowsAffected > 0) {
                                        JOptionPane.showMessageDialog(framePaymentbyADMIN.this, "Transaction Successful");
                                        tfAccountNo.setText(null);
                                        tfID.setText(null);
                                        comboSelectPerson.setSelectedIndex(0);
                                        monthChooser.setMonth(0);
                                        tfPaidAmmount.setText(null);
                                    } else {
                                        JOptionPane.showMessageDialog(framePaymentbyADMIN.this, "Failed to insert transaction data.");
                                    }
                                }
                            } catch (SQLException e) {
                                e.printStackTrace();
                            }

                            try (Connection connection3 = DriverManager.getConnection(jdbcUrl, username, password)) {
                                // Prepare the SQL UPDATE query
                                String sqlQuery3 = "UPDATE TeacherTable SET teacherPayableMoney = ? WHERE teacherId = ?";

                                try (PreparedStatement statement3 = connection3.prepareStatement(sqlQuery3)) {
                                    // Set the new payable money and student ID as parameters in the query
                                    statement3.setDouble(1, TeacherPayableMoney);
                                    statement3.setInt(2, personId);

                                    // Execute the UPDATE query
                                    statement3.executeUpdate();

                                }
                            } catch (SQLException e) {
                                e.printStackTrace();
                            }

                        } else {
                            JOptionPane.showMessageDialog(framePaymentbyADMIN.this, "account no and user id does not match");
                        }
                    } else {
                        //
                    }
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }

            // else selectedperson ==1 *********************************************************************************************************************
        } else if (selectedPerson == 2) {// for staff *******************************************************************************

            try (Connection connection = DriverManager.getConnection(jdbcUrl, username, password)) {
                // Prepare the SQL SELECT query
                String sqlQuery = "SELECT staffAccountNo,staffSalaryScale,staffPayableMoney FROM StaffTable WHERE staffId = ?";

                try (PreparedStatement statement = connection.prepareStatement(sqlQuery)) {
                    // Set the student ID parameter in the query
                    statement.setInt(1, personId);

                    // Execute the query and get the result set
                    ResultSet resultSet = statement.executeQuery();

                    // Check if a matching student is found
                    if (resultSet.next()) {
                        String accountNo = resultSet.getString("staffAccountNo");
                        double studentPaymentScale = resultSet.getDouble("staffSalaryScale");
                        double StaffPayableMoney = resultSet.getDouble("staffPayableMoney");
                        if (inputAccountNo.equalsIgnoreCase(accountNo)) {

                            try (Connection connection2 = DriverManager.getConnection(jdbcUrl, username, password)) {
                                // Prepare the SQL INSERT query
                                String sqlQuery2 = "INSERT INTO TransactionTable (staffId,  account_no, paidAmount, payable_money,  transactionMonth, transactiondate) VALUES ( ?, ?, ?, ?, ?, ?)";

                                try (PreparedStatement statement2 = connection2.prepareStatement(sqlQuery2)) {
                                    // Set the values for the parameters in the query
                                    statement2.setInt(1, personId);
                                    statement2.setString(2, accountNo);
                                    statement2.setDouble(3, paidAmmount);
                                    statement2.setDouble(4, studentPaymentScale - paidAmmount);
                                    StaffPayableMoney = StaffPayableMoney + (studentPaymentScale - paidAmmount);
                                    statement2.setString(5, monthName);
                                    java.sql.Date currentDate = new java.sql.Date(System.currentTimeMillis());
                                    statement2.setDate(6, currentDate);

                                    // Execute the INSERT query
                                    int rowsAffected = statement2.executeUpdate();

                                    if (rowsAffected > 0) {
                                        JOptionPane.showMessageDialog(framePaymentbyADMIN.this, "Transaction Successful");
                                        tfAccountNo.setText(null);
                                        tfID.setText(null);
                                        comboSelectPerson.setSelectedIndex(0);
                                        monthChooser.setMonth(0);
                                        tfPaidAmmount.setText(null);
                                    } else {
                                        JOptionPane.showMessageDialog(framePaymentbyADMIN.this, "Failed to insert transaction data.");
                                    }
                                }
                            } catch (SQLException e) {
                                e.printStackTrace();
                            }

                            try (Connection connection3 = DriverManager.getConnection(jdbcUrl, username, password)) {
                                // Prepare the SQL UPDATE query
                                String sqlQuery3 = "UPDATE StaffTable SET staffPayableMoney = ? WHERE staffId = ?";

                                try (PreparedStatement statement3 = connection3.prepareStatement(sqlQuery3)) {
                                    // Set the new payable money and student ID as parameters in the query
                                    statement3.setDouble(1, StaffPayableMoney);
                                    statement3.setInt(2, personId);

                                    // Execute the UPDATE query
                                    statement3.executeUpdate();

                                }
                            } catch (SQLException e) {
                                e.printStackTrace();
                            }

                        } else {
                            JOptionPane.showMessageDialog(framePaymentbyADMIN.this, "account no and user id does not match");
                        }
                    } else {
                        //
                    }
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }

            // else selectedperson ==2
        }

    }//GEN-LAST:event_btnSubmitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(framePaymentbyADMIN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(framePaymentbyADMIN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(framePaymentbyADMIN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(framePaymentbyADMIN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new framePaymentbyADMIN().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSubmit;
    private javax.swing.JComboBox<String> comboSelectPerson;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel8;
    private com.toedter.calendar.JMonthChooser monthChooser;
    private javax.swing.JTextField tfAccountNo;
    private javax.swing.JTextField tfID;
    private javax.swing.JTextField tfPaidAmmount;
    // End of variables declaration//GEN-END:variables
}
