
import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;

import java.sql.*;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author sakib
 */
public class frameManageStudentbyADMIN extends javax.swing.JFrame {

    /**
     * Creates new form frameManageStudentbyADMIN
     */
    public frameManageStudentbyADMIN() {
        initComponents();
        setSize(1000, 800);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        tfSearchBar = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        btnUpdateStudent = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        comboSearchOption = new javax.swing.JComboBox<>();
        tfStudentIdUpdate = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        tfStudentIdDelete = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        tfSetDefaultRoll = new javax.swing.JTextField();
        lblBackground = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(44, 52, 106, 49));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 30)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("ADMIN Manage Student");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 52, 451, 49));

        tfSearchBar.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        tfSearchBar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfSearchBarActionPerformed(evt);
            }
        });
        getContentPane().add(tfSearchBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(65, 428, 813, 44));

        jButton2.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jButton2.setText("Add Student");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(65, 189, 200, 50));

        btnUpdateStudent.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        btnUpdateStudent.setText("Update Student");
        btnUpdateStudent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateStudentActionPerformed(evt);
            }
        });
        getContentPane().add(btnUpdateStudent, new org.netbeans.lib.awtextra.AbsoluteConstraints(359, 274, 200, 50));

        btnDelete.setBackground(new java.awt.Color(255, 0, 102));
        btnDelete.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        btnDelete.setText("Delete Student");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        getContentPane().add(btnDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(678, 274, 200, 50));

        btnSearch.setBackground(new java.awt.Color(51, 204, 0));
        btnSearch.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });
        getContentPane().add(btnSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(65, 490, 226, 57));

        comboSearchOption.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        comboSearchOption.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All Student", "UserName", "Name", "Phone", "Email", "Section" }));
        getContentPane().add(comboSearchOption, new org.netbeans.lib.awtextra.AbsoluteConstraints(65, 369, 276, 41));

        tfStudentIdUpdate.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        getContentPane().add(tfStudentIdUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(359, 226, 200, 35));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Student ID:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(359, 193, 200, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Student ID:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(678, 189, 200, 30));

        tfStudentIdDelete.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tfStudentIdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfStudentIdDeleteActionPerformed(evt);
            }
        });
        getContentPane().add(tfStudentIdDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(678, 226, 200, 35));

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Set default roll for Class:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(497, 552, -1, 46));

        jButton3.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jButton3.setText("GO");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(629, 616, 139, 48));

        tfSetDefaultRoll.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        tfSetDefaultRoll.setText("1");
        tfSetDefaultRoll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfSetDefaultRollActionPerformed(evt);
            }
        });
        getContentPane().add(tfSetDefaultRoll, new org.netbeans.lib.awtextra.AbsoluteConstraints(765, 555, 81, 41));

        lblBackground.setForeground(new java.awt.Color(255, 255, 255));
        lblBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/ComnmonBG.png"))); // NOI18N
        getContentPane().add(lblBackground, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1000, 820));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        frameSignUpAsStudentbyADMIN signUpAsStudentbyADMIN2 = new frameSignUpAsStudentbyADMIN();
        signUpAsStudentbyADMIN2.setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:

        int deleteId = Integer.parseInt(tfStudentIdDelete.getText());

        JFrame frame = new JFrame();
        int dialogResult = JOptionPane.showConfirmDialog(frame,
                "Do you want remove this account?", "Confirmation",
                JOptionPane.YES_NO_OPTION);

        if (dialogResult == JOptionPane.YES_OPTION) {

            try {
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                Connection connection = DriverManager
                        .getConnection(
                                "jdbc:sqlserver://localhost:1433;databaseName=RainbowPrimarySchool;selectMethod=cursor", "sa", "123456");

                // find if the username and password exist in database and also get the student id
                String sqlQuery = "DELETE FROM StudentTable WHERE studentId = ?";

                PreparedStatement statement = connection.prepareStatement(sqlQuery);

                statement.setInt(1, deleteId);

                int deleted = statement.executeUpdate();

                // Optionally, handle the result of the delete operation
                if (deleted > 0) {
                    JOptionPane.showMessageDialog(frameManageStudentbyADMIN.this, deleteId + " is successfully deleted");
                } else {
                    JOptionPane.showMessageDialog(frameManageStudentbyADMIN.this, deleteId + " is not deleted");
                }
            } catch (Exception e) {
                e.printStackTrace();
            }

            
            frameManageStudentbyADMIN manageStudentbyADMIN = new frameManageStudentbyADMIN();
            manageStudentbyADMIN.setVisible(true);
            setVisible(false);
        } else {
            // User clicked "No," handle it as needed
            // JOptionPane.showMessageDialog(frame, "You clicked NO. Staying on the current page.");
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnUpdateStudentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateStudentActionPerformed
        // TODO add your handling code here:
        //int updateId = Integer.parseInt(tfStudentIdUpdate.getText());
        frameUpdateStudentbyADMIN updateStudentbyADMIN = new frameUpdateStudentbyADMIN();
        updateStudentbyADMIN.setComponentsUpdateStudentsByAdmin(Integer.parseInt(tfStudentIdUpdate.getText()));
        updateStudentbyADMIN.setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_btnUpdateStudentActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        
        int selectedIndex = comboSearchOption.getSelectedIndex();
        String jdbcUrl = "jdbc:sqlserver://localhost:1433;databaseName=RainbowPrimarySchool";
        String username = "sa";
        String password = "123456";

        int rowCount = 0;

        /// search all the students
        if (selectedIndex == 0) {//************************************************************************************************************************************************************************************************************

            String sqlQuery1 = "SELECT COUNT(*) AS student_count FROM StudentTable";
            String sqlQuery2 = "SELECT *  FROM StudentTable";

            /// getting how many students are there with this username 
            try (Connection connection = DriverManager.getConnection(jdbcUrl, username, password)) {

                try (Statement statement = connection.createStatement()) {
                    // Execute the SELECT COUNT(*) query and get the result set
                    ResultSet resultSet = statement.executeQuery(sqlQuery1);

                    // Process the result set and retrieve the count value
                    if (resultSet.next()) {
                        rowCount = resultSet.getInt("student_count");
                        //System.out.println("Number of students with the condition: " + studentCount);
                    }
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }

            /// showing details in another jframe 
            try (Connection connection = DriverManager.getConnection(jdbcUrl, username, password)) {
                // Prepare the SQL SELECT query

                try (Statement statement = connection.createStatement()) {
                    // Execute the query and get the result set
                    ResultSet resultSet = statement.executeQuery(sqlQuery2);

                    // Get the metadata of the result set to get column names and count
                    ResultSetMetaData metaData = resultSet.getMetaData();
                    int columnCount = metaData.getColumnCount();

                    // Create a 2D array to store the data for the JTable
                    Object[][] data = new Object[rowCount][columnCount]; // Assuming you have a maximum of 100 rows (adjust as needed)

                    int row = 0;
                    // Populate the 2D array with the fetched data
                    while (resultSet.next()) {
                        for (int i = 1; i <= columnCount; i++) {
                            data[row][i - 1] = resultSet.getObject(i);
                        }
                        row++;
                    }

                    // Create an array to store column names for the JTable
                    String[] columnNames = new String[columnCount];
                    for (int i = 1; i <= columnCount; i++) {
                        columnNames[i - 1] = metaData.getColumnName(i);
                    }

                    // Create a new TableModel with the fetched data and column names
                    DefaultTableModel model = new DefaultTableModel(data, columnNames);

                    // Get the existing JTable from your JFrame (replace "YourJFrame" with the actual reference to your JFrame)
                    JTable table = new JTable(model);

                    table.setPreferredScrollableViewportSize(new Dimension(1000, 800));

                    // Center the table within a JPanel
                    JPanel panel = new JPanel(new BorderLayout());
                    panel.add(new JScrollPane(table), BorderLayout.CENTER);

                    // Create a custom TableCellRenderer to change the text size
                    DefaultTableCellRenderer cellRenderer = new DefaultTableCellRenderer() {
                        @Override
                        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                            Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                            c.setFont(new Font("Arial", Font.PLAIN, 18)); // Change the font size (16 in this example)
                            return c;
                        }
                    };

                    // Apply the custom TableCellRenderer to all columns in the table
                    for (int i = 0; i < table.getColumnCount(); i++) {
                        table.getColumnModel().getColumn(i).setCellRenderer(cellRenderer);
                    }

                    // Remove previous content and add the panel to the JFrame
                    JFrame frame = new JFrame("Custom Font Size Table");
                    frame.getContentPane().removeAll();
                    frame.add(panel);

                    // Add the close button
                    JButton closeButton = new JButton("Close");
                    closeButton.addActionListener(new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent e) {
                            frame.dispose(); // Close the JFrame when the button is clicked
                        }
                    });

                    frame.add(closeButton, BorderLayout.SOUTH);

                    frame.setLocation(460, 120);

                    frame.pack();
                    frame.setVisible(true);
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }

        }

// search with username 
        if (selectedIndex == 1) {

            String inputusername = tfSearchBar.getText().trim();
            String condition = "studentUsername = '" + inputusername + "'";
            String sqlQuery1 = "SELECT COUNT(*) AS student_count FROM StudentTable WHERE " + condition;
            String sqlQuery2 = "SELECT *  FROM StudentTable WHERE " + condition;

            /// getting how many students are there with this username 
            try (Connection connection = DriverManager.getConnection(jdbcUrl, username, password)) {

                try (Statement statement = connection.createStatement()) {
                    // Execute the SELECT COUNT(*) query and get the result set
                    ResultSet resultSet = statement.executeQuery(sqlQuery1);

                    // Process the result set and retrieve the count value
                    if (resultSet.next()) {
                        rowCount = resultSet.getInt("student_count");
                        //System.out.println("Number of students with the condition: " + studentCount);
                    }
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }

            /// showing details in another jframe 
            try (Connection connection = DriverManager.getConnection(jdbcUrl, username, password)) {
                // Prepare the SQL SELECT query

                try (Statement statement = connection.createStatement()) {
                    // Execute the query and get the result set
                    ResultSet resultSet = statement.executeQuery(sqlQuery2);

                    // Get the metadata of the result set to get column names and count
                    ResultSetMetaData metaData = resultSet.getMetaData();
                    int columnCount = metaData.getColumnCount();

                    // Create a 2D array to store the data for the JTable
                    Object[][] data = new Object[rowCount][columnCount]; // Assuming you have a maximum of 100 rows (adjust as needed)

                    int row = 0;
                    // Populate the 2D array with the fetched data
                    while (resultSet.next()) {
                        for (int i = 1; i <= columnCount; i++) {
                            data[row][i - 1] = resultSet.getObject(i);
                        }
                        row++;
                    }

                    // Create an array to store column names for the JTable
                    String[] columnNames = new String[columnCount];
                    for (int i = 1; i <= columnCount; i++) {
                        columnNames[i - 1] = metaData.getColumnName(i);
                    }

                    // Create a new TableModel with the fetched data and column names
                    DefaultTableModel model = new DefaultTableModel(data, columnNames);

                    // Get the existing JTable from your JFrame (replace "YourJFrame" with the actual reference to your JFrame)
                    JTable table = new JTable(model);

                    table.setPreferredScrollableViewportSize(new Dimension(1000, 800));

                    // Center the table within a JPanel
                    JPanel panel = new JPanel(new BorderLayout());
                    panel.add(new JScrollPane(table), BorderLayout.CENTER);

                    // Create a custom TableCellRenderer to change the text size
                    DefaultTableCellRenderer cellRenderer = new DefaultTableCellRenderer() {
                        @Override
                        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                            Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                            c.setFont(new Font("Arial", Font.PLAIN, 18)); // Change the font size (16 in this example)
                            return c;
                        }
                    };

                    // Apply the custom TableCellRenderer to all columns in the table
                    for (int i = 0; i < table.getColumnCount(); i++) {
                        table.getColumnModel().getColumn(i).setCellRenderer(cellRenderer);
                    }

                    // Remove previous content and add the panel to the JFrame
                    JFrame frame = new JFrame("Custom Font Size Table");
                    frame.getContentPane().removeAll();
                    frame.add(panel);

                    // Add the close button
                    JButton closeButton = new JButton("Close");
                    closeButton.addActionListener(new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent e) {
                            frame.dispose(); // Close the JFrame when the button is clicked
                        }
                    });

                    frame.add(closeButton, BorderLayout.SOUTH);

                    frame.setLocation(460, 120);

                    frame.pack();
                    frame.setVisible(true);
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }

        } /// search with name
        else if (selectedIndex == 2) {

            String inputName = tfSearchBar.getText().trim();

            String condition = "'%" + inputName + "%'";
            String sqlQuery1 = "SELECT COUNT(*) AS student_count FROM StudentTable WHERE CONCAT(studentFirstName, ' ', studentLastName) LIKE " + condition;
            String sqlQuery2 = "SELECT * FROM StudentTable WHERE CONCAT(studentFirstName, ' ', studentLastName) LIKE " + condition;

            /// getting how many students are there with this username 
            try (Connection connection = DriverManager.getConnection(jdbcUrl, username, password)) {

                try (Statement statement = connection.createStatement()) {
                    // Execute the SELECT COUNT(*) query and get the result set
                    ResultSet resultSet = statement.executeQuery(sqlQuery1);

                    // Process the result set and retrieve the count value
                    if (resultSet.next()) {
                        rowCount = resultSet.getInt("student_count");
                        //System.out.println("Number of students with the condition: " + studentCount);
                    }
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }

            /// showing details in another jframe 
            try (Connection connection = DriverManager.getConnection(jdbcUrl, username, password)) {
                // Prepare the SQL SELECT query

                try (Statement statement = connection.createStatement()) {
                    // Execute the query and get the result set
                    ResultSet resultSet = statement.executeQuery(sqlQuery2);

                    // Get the metadata of the result set to get column names and count
                    ResultSetMetaData metaData = resultSet.getMetaData();
                    int columnCount = metaData.getColumnCount();

                    // Create a 2D array to store the data for the JTable
                    Object[][] data = new Object[rowCount][columnCount]; // Assuming you have a maximum of 100 rows (adjust as needed)

                    int row = 0;
                    // Populate the 2D array with the fetched data
                    while (resultSet.next()) {
                        for (int i = 1; i <= columnCount; i++) {
                            data[row][i - 1] = resultSet.getObject(i);
                        }
                        row++;
                    }

                    // Create an array to store column names for the JTable
                    String[] columnNames = new String[columnCount];
                    for (int i = 1; i <= columnCount; i++) {
                        columnNames[i - 1] = metaData.getColumnName(i);
                    }

                    // Create a new TableModel with the fetched data and column names
                    DefaultTableModel model = new DefaultTableModel(data, columnNames);

                    // Get the existing JTable from your JFrame (replace "YourJFrame" with the actual reference to your JFrame)
                    JTable table = new JTable(model);

                    table.setPreferredScrollableViewportSize(new Dimension(1000, 800));

                    // Center the table within a JPanel
                    JPanel panel = new JPanel(new BorderLayout());
                    panel.add(new JScrollPane(table), BorderLayout.CENTER);

                    // Create a custom TableCellRenderer to change the text size
                    DefaultTableCellRenderer cellRenderer = new DefaultTableCellRenderer() {
                        @Override
                        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                            Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                            c.setFont(new Font("Arial", Font.PLAIN, 18)); // Change the font size (16 in this example)
                            return c;
                        }
                    };

                    // Apply the custom TableCellRenderer to all columns in the table
                    for (int i = 0; i < table.getColumnCount(); i++) {
                        table.getColumnModel().getColumn(i).setCellRenderer(cellRenderer);
                    }

                    // Remove previous content and add the panel to the JFrame
                    JFrame frame = new JFrame("Custom Font Size Table");
                    frame.getContentPane().removeAll();
                    frame.add(panel);

                    // Add the close button
                    JButton closeButton = new JButton("Close");
                    closeButton.addActionListener(new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent e) {
                            frame.dispose(); // Close the JFrame when the button is clicked
                        }
                    });

                    frame.add(closeButton, BorderLayout.SOUTH);

                    frame.setLocation(460, 120);

                    frame.pack();
                    frame.setVisible(true);
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }

        } /// search with phone 
        else if (selectedIndex == 3) {

            String inputphone = tfSearchBar.getText().trim();
            String condition = "studentParentPhone = '" + inputphone + "'";
            String sqlQuery1 = "SELECT COUNT(*) AS student_count FROM StudentTable WHERE " + condition;
            String sqlQuery2 = "SELECT *  FROM StudentTable WHERE " + condition;

            /// getting how many students are there with this username 
            try (Connection connection = DriverManager.getConnection(jdbcUrl, username, password)) {

                try (Statement statement = connection.createStatement()) {
                    // Execute the SELECT COUNT(*) query and get the result set
                    ResultSet resultSet = statement.executeQuery(sqlQuery1);

                    // Process the result set and retrieve the count value
                    if (resultSet.next()) {
                        rowCount = resultSet.getInt("student_count");
                        //System.out.println("Number of students with the condition: " + studentCount);
                    }
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }

            /// showing details in another jframe 
            try (Connection connection = DriverManager.getConnection(jdbcUrl, username, password)) {
                // Prepare the SQL SELECT query

                try (Statement statement = connection.createStatement()) {
                    // Execute the query and get the result set
                    ResultSet resultSet = statement.executeQuery(sqlQuery2);

                    // Get the metadata of the result set to get column names and count
                    ResultSetMetaData metaData = resultSet.getMetaData();
                    int columnCount = metaData.getColumnCount();

                    // Create a 2D array to store the data for the JTable
                    Object[][] data = new Object[rowCount][columnCount]; // Assuming you have a maximum of 100 rows (adjust as needed)

                    int row = 0;
                    // Populate the 2D array with the fetched data
                    while (resultSet.next()) {
                        for (int i = 1; i <= columnCount; i++) {
                            data[row][i - 1] = resultSet.getObject(i);
                        }
                        row++;
                    }

                    // Create an array to store column names for the JTable
                    String[] columnNames = new String[columnCount];
                    for (int i = 1; i <= columnCount; i++) {
                        columnNames[i - 1] = metaData.getColumnName(i);
                    }

                    // Create a new TableModel with the fetched data and column names
                    DefaultTableModel model = new DefaultTableModel(data, columnNames);

                    // Get the existing JTable from your JFrame (replace "YourJFrame" with the actual reference to your JFrame)
                    JTable table = new JTable(model);

                    table.setPreferredScrollableViewportSize(new Dimension(1000, 800));

                    // Center the table within a JPanel
                    JPanel panel = new JPanel(new BorderLayout());
                    panel.add(new JScrollPane(table), BorderLayout.CENTER);

                    // Create a custom TableCellRenderer to change the text size
                    DefaultTableCellRenderer cellRenderer = new DefaultTableCellRenderer() {
                        @Override
                        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                            Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                            c.setFont(new Font("Arial", Font.PLAIN, 18)); // Change the font size (16 in this example)
                            return c;
                        }
                    };

                    // Apply the custom TableCellRenderer to all columns in the table
                    for (int i = 0; i < table.getColumnCount(); i++) {
                        table.getColumnModel().getColumn(i).setCellRenderer(cellRenderer);
                    }

                    // Remove previous content and add the panel to the JFrame
                    JFrame frame = new JFrame("Custom Font Size Table");
                    frame.getContentPane().removeAll();
                    frame.add(panel);

                    // Add the close button
                    JButton closeButton = new JButton("Close");
                    closeButton.addActionListener(new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent e) {
                            frame.dispose(); // Close the JFrame when the button is clicked
                        }
                    });

                    frame.add(closeButton, BorderLayout.SOUTH);

                    frame.setLocation(460, 120);

                    frame.pack();
                    frame.setVisible(true);
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }

        } /// search with email
        else if (selectedIndex == 4) {
            String inputEmail = tfSearchBar.getText().trim();
            String condition = "studentEmail = '" + inputEmail + "'";
            String sqlQuery1 = "SELECT COUNT(*) AS student_count FROM StudentTable WHERE " + condition;
            String sqlQuery2 = "SELECT *  FROM StudentTable WHERE " + condition;

            /// getting how many students are there with this username 
            try (Connection connection = DriverManager.getConnection(jdbcUrl, username, password)) {

                try (Statement statement = connection.createStatement()) {
                    // Execute the SELECT COUNT(*) query and get the result set
                    ResultSet resultSet = statement.executeQuery(sqlQuery1);

                    // Process the result set and retrieve the count value
                    if (resultSet.next()) {
                        rowCount = resultSet.getInt("student_count");
                        //System.out.println("Number of students with the condition: " + studentCount);
                    }
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }

            /// showing details in another jframe 
            try (Connection connection = DriverManager.getConnection(jdbcUrl, username, password)) {
                // Prepare the SQL SELECT query

                try (Statement statement = connection.createStatement()) {
                    // Execute the query and get the result set
                    ResultSet resultSet = statement.executeQuery(sqlQuery2);

                    // Get the metadata of the result set to get column names and count
                    ResultSetMetaData metaData = resultSet.getMetaData();
                    int columnCount = metaData.getColumnCount();

                    // Create a 2D array to store the data for the JTable
                    Object[][] data = new Object[rowCount][columnCount]; // Assuming you have a maximum of 100 rows (adjust as needed)

                    int row = 0;
                    // Populate the 2D array with the fetched data
                    while (resultSet.next()) {
                        for (int i = 1; i <= columnCount; i++) {
                            data[row][i - 1] = resultSet.getObject(i);
                        }
                        row++;
                    }

                    // Create an array to store column names for the JTable
                    String[] columnNames = new String[columnCount];
                    for (int i = 1; i <= columnCount; i++) {
                        columnNames[i - 1] = metaData.getColumnName(i);
                    }

                    // Create a new TableModel with the fetched data and column names
                    DefaultTableModel model = new DefaultTableModel(data, columnNames);

                    // Get the existing JTable from your JFrame (replace "YourJFrame" with the actual reference to your JFrame)
                    JTable table = new JTable(model);

                    table.setPreferredScrollableViewportSize(new Dimension(1000, 800));

                    // Center the table within a JPanel
                    JPanel panel = new JPanel(new BorderLayout());
                    panel.add(new JScrollPane(table), BorderLayout.CENTER);

                    // Create a custom TableCellRenderer to change the text size
                    DefaultTableCellRenderer cellRenderer = new DefaultTableCellRenderer() {
                        @Override
                        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                            Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                            c.setFont(new Font("Arial", Font.PLAIN, 18)); // Change the font size (16 in this example)
                            return c;
                        }
                    };

                    // Apply the custom TableCellRenderer to all columns in the table
                    for (int i = 0; i < table.getColumnCount(); i++) {
                        table.getColumnModel().getColumn(i).setCellRenderer(cellRenderer);
                    }

                    // Remove previous content and add the panel to the JFrame
                    JFrame frame = new JFrame("Custom Font Size Table");
                    frame.getContentPane().removeAll();
                    frame.add(panel);

                    // Add the close button
                    JButton closeButton = new JButton("Close");
                    closeButton.addActionListener(new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent e) {
                            frame.dispose(); // Close the JFrame when the button is clicked
                        }
                    });

                    frame.add(closeButton, BorderLayout.SOUTH);

                    frame.setLocation(460, 120);

                    frame.pack();
                    frame.setVisible(true);
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        } // search with courses 
        else if (selectedIndex == 5) {

            String inputEmail = tfSearchBar.getText().trim();
            String condition = "studentSection = '" + inputEmail + "'";
            String sqlQuery1 = "SELECT COUNT(*) AS student_count FROM StudentTable WHERE " + condition;
            String sqlQuery2 = "SELECT *  FROM StudentTable WHERE " + condition;

            /// getting how many students are there with this username 
            try (Connection connection = DriverManager.getConnection(jdbcUrl, username, password)) {

                try (Statement statement = connection.createStatement()) {
                    // Execute the SELECT COUNT(*) query and get the result set
                    ResultSet resultSet = statement.executeQuery(sqlQuery1);

                    // Process the result set and retrieve the count value
                    if (resultSet.next()) {
                        rowCount = resultSet.getInt("student_count");
                        //System.out.println("Number of students with the condition: " + studentCount);
                    }
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }

            /// showing details in another jframe 
            try (Connection connection = DriverManager.getConnection(jdbcUrl, username, password)) {
                // Prepare the SQL SELECT query

                try (Statement statement = connection.createStatement()) {
                    // Execute the query and get the result set
                    ResultSet resultSet = statement.executeQuery(sqlQuery2);

                    // Get the metadata of the result set to get column names and count
                    ResultSetMetaData metaData = resultSet.getMetaData();
                    int columnCount = metaData.getColumnCount();

                    // Create a 2D array to store the data for the JTable
                    Object[][] data = new Object[rowCount][columnCount]; // Assuming you have a maximum of 100 rows (adjust as needed)

                    int row = 0;
                    // Populate the 2D array with the fetched data
                    while (resultSet.next()) {
                        for (int i = 1; i <= columnCount; i++) {
                            data[row][i - 1] = resultSet.getObject(i);
                        }
                        row++;
                    }

                    // Create an array to store column names for the JTable
                    String[] columnNames = new String[columnCount];
                    for (int i = 1; i <= columnCount; i++) {
                        columnNames[i - 1] = metaData.getColumnName(i);
                    }

                    // Create a new TableModel with the fetched data and column names
                    DefaultTableModel model = new DefaultTableModel(data, columnNames);

                    // Get the existing JTable from your JFrame (replace "YourJFrame" with the actual reference to your JFrame)
                    JTable table = new JTable(model);

                    table.setPreferredScrollableViewportSize(new Dimension(1000, 800));

                    // Center the table within a JPanel
                    JPanel panel = new JPanel(new BorderLayout());
                    panel.add(new JScrollPane(table), BorderLayout.CENTER);

                    // Create a custom TableCellRenderer to change the text size
                    DefaultTableCellRenderer cellRenderer = new DefaultTableCellRenderer() {
                        @Override
                        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                            Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                            c.setFont(new Font("Arial", Font.PLAIN, 18)); // Change the font size (16 in this example)
                            return c;
                        }
                    };

                    // Apply the custom TableCellRenderer to all columns in the table
                    for (int i = 0; i < table.getColumnCount(); i++) {
                        table.getColumnModel().getColumn(i).setCellRenderer(cellRenderer);
                    }

                    // Remove previous content and add the panel to the JFrame
                    JFrame frame = new JFrame("Custom Font Size Table");
                    frame.getContentPane().removeAll();
                    frame.add(panel);

                    // Add the close button
                    JButton closeButton = new JButton("Close");
                    closeButton.addActionListener(new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent e) {
                            frame.dispose(); // Close the JFrame when the button is clicked
                        }
                    });

                    frame.add(closeButton, BorderLayout.SOUTH);

                    frame.setLocation(460, 120);

                    frame.pack();
                    frame.setVisible(true);
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void tfSearchBarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfSearchBarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfSearchBarActionPerformed

    private void tfStudentIdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfStudentIdDeleteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfStudentIdDeleteActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        frameADMINHomePage adminhp = new frameADMINHomePage();
        adminhp.setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        
        String rollUpdateClass = tfSetDefaultRoll.getText().trim();
        JFrame frame = new JFrame();
        int dialogResult = JOptionPane.showConfirmDialog(frame,
                "Do you want execute this account?", "Confirmation",
                JOptionPane.YES_NO_OPTION);
        
        if (dialogResult == JOptionPane.YES_OPTION){
        String jdbcUrl = "jdbc:sqlserver://localhost:1433;databaseName=RainbowPrimarySchool";
        String username = "sa";
        String password = "123456";
        
        
         try (Connection connection = DriverManager.getConnection(jdbcUrl, username, password)) {
            // Prepare the SQL UPDATE statement
            String sqlUpdate = "UPDATE StudentTable " +
                               "SET StudentCurrentRoll = NewRollNumber " +
                               "FROM ( " +
                               "    SELECT studentId, " +
                               "           ROW_NUMBER() OVER (PARTITION BY studentSection ORDER BY studentId) AS NewRollNumber " +
                               "    FROM StudentTable " +
                               "    WHERE studentCurentClass ="+ rollUpdateClass+" " +
                               ") AS TempTable " +
                               "WHERE StudentTable.studentId = TempTable.studentId";

            try (Statement statement = connection.createStatement()) {
                // Execute the SQL UPDATE statement
                 statement.executeUpdate(sqlUpdate);
                
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        
        }else {
            // User clicked "No," handle it as needed
            // JOptionPane.showMessageDialog(frame, "You clicked NO. Staying on the current page.");
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void tfSetDefaultRollActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfSetDefaultRollActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfSetDefaultRollActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frameManageStudentbyADMIN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frameManageStudentbyADMIN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frameManageStudentbyADMIN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frameManageStudentbyADMIN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frameManageStudentbyADMIN().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdateStudent;
    private javax.swing.JComboBox<String> comboSearchOption;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel lblBackground;
    private javax.swing.JTextField tfSearchBar;
    private javax.swing.JTextField tfSetDefaultRoll;
    private javax.swing.JTextField tfStudentIdDelete;
    private javax.swing.JTextField tfStudentIdUpdate;
    // End of variables declaration//GEN-END:variables
}
