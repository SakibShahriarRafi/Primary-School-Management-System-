
import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;

import java.sql.*;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author sakib
 */
public class frameSeeResultbyADMINandTeacher extends javax.swing.JFrame {

    public String senderperson = null;
    public int senderid = 0;

    /**
     * Creates new form frameSeeResultbyADMIN
     */
    public frameSeeResultbyADMINandTeacher() {
        initComponents();
        setSize(1000, 800);
    }

    public void setComponentsSeeResultbyAdmin(String person, int id) {
        senderperson = person;
        senderid = id;
        if (person.equalsIgnoreCase("admin")) {
            btnUpdateDatabaseResult.setVisible(true);
            lblResultHead.setText("SeeResult By ADMIN");
        } else if (person.equalsIgnoreCase("teacher")) {
            btnUpdateDatabaseResult.setVisible(false);
            lblResultHead.setText("SeeResult By Teacher");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        lblResultHead = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        tfRoll = new javax.swing.JTextField();
        tfSection = new javax.swing.JTextField();
        btnsearch = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        comboBasedOn = new javax.swing.JComboBox<>();
        tfClass = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        tfCourseID = new javax.swing.JTextField();
        btnUpdateDatabaseResult = new javax.swing.JButton();
        lblBackground = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 37, 100, 46));

        lblResultHead.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lblResultHead.setForeground(new java.awt.Color(255, 255, 255));
        lblResultHead.setText("ADMIN see result");
        getContentPane().add(lblResultHead, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 33, -1, 46));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Class:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(62, 135, 200, 30));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Section:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(388, 130, 200, 40));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Student Roll:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(696, 130, 200, 40));

        tfRoll.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tfRoll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfRollActionPerformed(evt);
            }
        });
        getContentPane().add(tfRoll, new org.netbeans.lib.awtextra.AbsoluteConstraints(696, 178, 200, 40));

        tfSection.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tfSection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfSectionActionPerformed(evt);
            }
        });
        getContentPane().add(tfSection, new org.netbeans.lib.awtextra.AbsoluteConstraints(388, 178, 200, 40));

        btnsearch.setBackground(new java.awt.Color(51, 204, 0));
        btnsearch.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        btnsearch.setText("Search");
        btnsearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnsearchActionPerformed(evt);
            }
        });
        getContentPane().add(btnsearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(316, 554, 348, 61));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Based on ");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 410, 200, 30));

        comboBasedOn.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        comboBasedOn.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All Information", "Class", "Section", "Course ID", "Display ALl Student Info" }));
        comboBasedOn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBasedOnActionPerformed(evt);
            }
        });
        getContentPane().add(comboBasedOn, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 447, 200, 40));

        tfClass.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        getContentPane().add(tfClass, new org.netbeans.lib.awtextra.AbsoluteConstraints(62, 177, 200, 40));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Course ID:");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(388, 267, 200, 40));

        tfCourseID.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tfCourseID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfCourseIDActionPerformed(evt);
            }
        });
        getContentPane().add(tfCourseID, new org.netbeans.lib.awtextra.AbsoluteConstraints(388, 315, 200, 40));

        btnUpdateDatabaseResult.setBackground(new java.awt.Color(51, 0, 51));
        btnUpdateDatabaseResult.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        btnUpdateDatabaseResult.setForeground(new java.awt.Color(255, 0, 0));
        btnUpdateDatabaseResult.setText("UPDATE DATABASE RESULT");
        btnUpdateDatabaseResult.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateDatabaseResultActionPerformed(evt);
            }
        });
        getContentPane().add(btnUpdateDatabaseResult, new org.netbeans.lib.awtextra.AbsoluteConstraints(305, 671, 379, 63));

        lblBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/ComnmonBG.png"))); // NOI18N
        getContentPane().add(lblBackground, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1000, 800));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void tfSectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfSectionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfSectionActionPerformed

    private void tfRollActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfRollActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfRollActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        if (senderperson.equalsIgnoreCase("admin")) {
            frameADMINHomePage adminhp = new frameADMINHomePage();
            adminhp.setVisible(true);
            setVisible(false);
        }
        else if(senderperson.equalsIgnoreCase("teacher")){
            frameTeacherHomepage teacherHomepage = new frameTeacherHomepage();
            teacherHomepage.setComponentsTeacherHomePage(senderid);
            teacherHomepage.setVisible(true);
            setVisible(false);
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void comboBasedOnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBasedOnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboBasedOnActionPerformed

    private void tfCourseIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfCourseIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfCourseIDActionPerformed

    private void btnsearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnsearchActionPerformed
        // TODO add your handling code here:

        String jdbcUrl = "jdbc:sqlserver://localhost:1433;databaseName=RainbowPrimarySchool";
        String username = "sa";
        String password = "123456";
        int basedOn = comboBasedOn.getSelectedIndex();

        if (senderperson.equalsIgnoreCase("admin")) {
            if (basedOn == 0) {// all information ***************************************************************************************************************************************************

                try (Connection connection = DriverManager.getConnection(jdbcUrl, username, password)) {
                    // Prepare the SQL SELECT query with JOIN operation
                    String sqlQuery = "SELECT g.gradingId, s.studentFirstName + ' ' + s.studentLastName AS studentName, "
                            + "g.studentClass, g.studentSection, g.studentRoll, g.courseId, c.courseName, "
                            + "t.teacherFirstName, g.obtainedMarks, g.obtainedGrade, g.isPassed "
                            + "FROM GradeTable g "
                            + "JOIN StudentTable s ON g.studentId = s.studentId "
                            + "JOIN CourseTable c ON g.courseId = c.courseId "
                            + "JOIN TeacherTable t ON g.teacherId = t.teacherId "
                            + "WHERE g.studentClass = ? AND g.studentSection = ? AND g.studentRoll = ? AND g.courseId = ?";

                    try (PreparedStatement preparedStatement = connection.prepareStatement(sqlQuery)) {
                        // Set the parameters for the prepared statement
                        preparedStatement.setInt(1, Integer.parseInt(tfClass.getText().trim()));
                        preparedStatement.setString(2, tfSection.getText());
                        preparedStatement.setInt(3, Integer.parseInt(tfRoll.getText().trim()));
                        preparedStatement.setString(4, tfCourseID.getText().trim());

                        try (ResultSet resultSet = preparedStatement.executeQuery()) {
                            // Create a DefaultTableModel to hold the data
                            DefaultTableModel model = new DefaultTableModel();
                            model.addColumn("Grading ID");
                            model.addColumn("Student Name");
                            model.addColumn("Class");
                            model.addColumn("Section");
                            model.addColumn("Roll");
                            model.addColumn("Course ID");
                            model.addColumn("Course Name");
                            model.addColumn("Teacher Name");
                            model.addColumn("Obtained Mark");
                            model.addColumn("Obtained Grade");
                            model.addColumn("Is Passed");

                            // Populate the table model with data from the result set
                            while (resultSet.next()) {
                                Object[] rowData = new Object[11];
                                rowData[0] = resultSet.getInt("gradingid");
                                rowData[1] = resultSet.getString("studentName");
                                rowData[2] = resultSet.getInt("studentClass");
                                rowData[3] = resultSet.getString("studentSection");
                                rowData[4] = resultSet.getInt("StudentRoll");
                                rowData[5] = resultSet.getString("courseId");
                                rowData[6] = resultSet.getString("courseName");
                                rowData[7] = resultSet.getString("teacherFirstName");
                                rowData[8] = resultSet.getDouble("obtainedMarks");
                                rowData[9] = resultSet.getString("obtainedGrade");
                                rowData[10] = resultSet.getBoolean("isPassed");

                                model.addRow(rowData);
                            }

                            // Create the new JTable and set its model
                            JTable newTable = new JTable(model);

                            // Show the JTable in a new JFrame
                            JFrame frame = new JFrame("Grade Information");
                            frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                            frame.getContentPane().add(new JScrollPane(newTable));
                            frame.setSize(1000, 800);
                            frame.setLocationRelativeTo(null);

                            frame.setVisible(true);

                            DefaultTableCellRenderer cellRenderer = new DefaultTableCellRenderer() {
                                @Override
                                public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                                    Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                                    c.setFont(new Font("Arial", Font.PLAIN, 18)); // Replace 18 with your desired font size
                                    return c;
                                }
                            };

                            // Apply the custom TableCellRenderer to all columns in the table
                            for (int i = 0; i < newTable.getColumnCount(); i++) {
                                newTable.getColumnModel().getColumn(i).setCellRenderer(cellRenderer);
                            }
                        }
                    }
                } catch (SQLException e) {
                    e.printStackTrace();
                }

                /// first if ends here 
            } else if (basedOn == 1) {//**********************************************************************************************************************

                try (Connection connection = DriverManager.getConnection(jdbcUrl, username, password)) {
                    // Prepare the SQL SELECT query with JOIN operation
                    String sqlQuery = "SELECT g.gradingId, s.studentFirstName + ' ' + s.studentLastName AS studentName, "
                            + "g.studentClass, g.studentSection, g.studentRoll, g.courseId, c.courseName, "
                            + "t.teacherFirstName, g.obtainedMarks, g.obtainedGrade, g.isPassed "
                            + "FROM GradeTable g "
                            + "JOIN StudentTable s ON g.studentId = s.studentId "
                            + "JOIN CourseTable c ON g.courseId = c.courseId "
                            + "JOIN TeacherTable t ON g.teacherId = t.teacherId "
                            + "WHERE g.studentClass = ? ";

                    try (PreparedStatement preparedStatement = connection.prepareStatement(sqlQuery)) {
                        // Set the parameters for the prepared statement
                        preparedStatement.setInt(1, Integer.parseInt(tfClass.getText().trim()));

                        try (ResultSet resultSet = preparedStatement.executeQuery()) {
                            // Create a DefaultTableModel to hold the data
                            DefaultTableModel model = new DefaultTableModel();
                            model.addColumn("Grading ID");
                            model.addColumn("Student Name");
                            model.addColumn("Class");
                            model.addColumn("Section");
                            model.addColumn("Roll");
                            model.addColumn("Course ID");
                            model.addColumn("Course Name");
                            model.addColumn("Teacher Name");
                            model.addColumn("Obtained Mark");
                            model.addColumn("Obtained Grade");
                            model.addColumn("Is Passed");

                            // Populate the table model with data from the result set
                            while (resultSet.next()) {
                                Object[] rowData = new Object[11];
                                rowData[0] = resultSet.getInt("gradingid");
                                rowData[1] = resultSet.getString("studentName");
                                rowData[2] = resultSet.getInt("studentClass");
                                rowData[3] = resultSet.getString("studentSection");
                                rowData[4] = resultSet.getInt("StudentRoll");
                                rowData[5] = resultSet.getString("courseId");
                                rowData[6] = resultSet.getString("courseName");
                                rowData[7] = resultSet.getString("teacherFirstName");
                                rowData[8] = resultSet.getDouble("obtainedMarks");
                                rowData[9] = resultSet.getString("obtainedGrade");
                                rowData[10] = resultSet.getBoolean("isPassed");

                                model.addRow(rowData);
                            }

                            // Create the new JTable and set its model
                            JTable newTable = new JTable(model);

                            // Show the JTable in a new JFrame
                            JFrame frame = new JFrame("Grade Information");
                            frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                            frame.getContentPane().add(new JScrollPane(newTable));
                            frame.setSize(1000, 800);
                            frame.setLocationRelativeTo(null);

                            frame.setVisible(true);

                            DefaultTableCellRenderer cellRenderer = new DefaultTableCellRenderer() {
                                @Override
                                public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                                    Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                                    c.setFont(new Font("Arial", Font.PLAIN, 18)); // Replace 18 with your desired font size
                                    return c;
                                }
                            };

                            // Apply the custom TableCellRenderer to all columns in the table
                            for (int i = 0; i < newTable.getColumnCount(); i++) {
                                newTable.getColumnModel().getColumn(i).setCellRenderer(cellRenderer);
                            }
                        }
                    }
                } catch (SQLException e) {
                    e.printStackTrace();
                }

                /// based on value 1 if ends here 
            } else if (basedOn == 2) {
                try (Connection connection = DriverManager.getConnection(jdbcUrl, username, password)) {
                    // Prepare the SQL SELECT query with JOIN operation
                    String sqlQuery = "SELECT g.gradingId, s.studentFirstName + ' ' + s.studentLastName AS studentName, "
                            + "g.studentClass, g.studentSection, g.studentRoll, g.courseId, c.courseName, "
                            + "t.teacherFirstName, g.obtainedMarks, g.obtainedGrade, g.isPassed "
                            + "FROM GradeTable g "
                            + "JOIN StudentTable s ON g.studentId = s.studentId "
                            + "JOIN CourseTable c ON g.courseId = c.courseId "
                            + "JOIN TeacherTable t ON g.teacherId = t.teacherId "
                            + "WHERE g.studentClass = ? AND g.studentSection = ? ";

                    try (PreparedStatement preparedStatement = connection.prepareStatement(sqlQuery)) {
                        // Set the parameters for the prepared statement
                        preparedStatement.setInt(1, Integer.parseInt(tfClass.getText().trim()));
                        preparedStatement.setString(2, tfSection.getText().trim());

                        try (ResultSet resultSet = preparedStatement.executeQuery()) {
                            // Create a DefaultTableModel to hold the data
                            DefaultTableModel model = new DefaultTableModel();
                            model.addColumn("Grading ID");
                            model.addColumn("Student Name");
                            model.addColumn("Class");
                            model.addColumn("Section");
                            model.addColumn("Roll");
                            model.addColumn("Course ID");
                            model.addColumn("Course Name");
                            model.addColumn("Teacher Name");
                            model.addColumn("Obtained Mark");
                            model.addColumn("Obtained Grade");
                            model.addColumn("Is Passed");

                            // Populate the table model with data from the result set
                            while (resultSet.next()) {
                                Object[] rowData = new Object[11];
                                rowData[0] = resultSet.getInt("gradingid");
                                rowData[1] = resultSet.getString("studentName");
                                rowData[2] = resultSet.getInt("studentClass");
                                rowData[3] = resultSet.getString("studentSection");
                                rowData[4] = resultSet.getInt("StudentRoll");
                                rowData[5] = resultSet.getString("courseId");
                                rowData[6] = resultSet.getString("courseName");
                                rowData[7] = resultSet.getString("teacherFirstName");
                                rowData[8] = resultSet.getDouble("obtainedMarks");
                                rowData[9] = resultSet.getString("obtainedGrade");
                                rowData[10] = resultSet.getBoolean("isPassed");

                                model.addRow(rowData);
                            }

                            // Create the new JTable and set its model
                            JTable newTable = new JTable(model);

                            // Show the JTable in a new JFrame
                            JFrame frame = new JFrame("Grade Information");
                            frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                            frame.getContentPane().add(new JScrollPane(newTable));
                            frame.setSize(1000, 800);
                            frame.setLocationRelativeTo(null);

                            frame.setVisible(true);

                            DefaultTableCellRenderer cellRenderer = new DefaultTableCellRenderer() {
                                @Override
                                public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                                    Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                                    c.setFont(new Font("Arial", Font.PLAIN, 18)); // Replace 18 with your desired font size
                                    return c;
                                }
                            };

                            // Apply the custom TableCellRenderer to all columns in the table
                            for (int i = 0; i < newTable.getColumnCount(); i++) {
                                newTable.getColumnModel().getColumn(i).setCellRenderer(cellRenderer);
                            }
                        }
                    }
                } catch (SQLException e) {
                    e.printStackTrace();
                }

                /// based on value 2 ends here 
            } else if (basedOn == 3) {

                try (Connection connection = DriverManager.getConnection(jdbcUrl, username, password)) {
                    // Prepare the SQL SELECT query with JOIN operation
                    String sqlQuery = "SELECT g.gradingId, s.studentFirstName + ' ' + s.studentLastName AS studentName, "
                            + "g.studentClass, g.studentSection, g.studentRoll, g.courseId, c.courseName, "
                            + "t.teacherFirstName, g.obtainedMarks, g.obtainedGrade, g.isPassed "
                            + "FROM GradeTable g "
                            + "JOIN StudentTable s ON g.studentId = s.studentId "
                            + "JOIN CourseTable c ON g.courseId = c.courseId "
                            + "JOIN TeacherTable t ON g.teacherId = t.teacherId "
                            + "WHERE g.courseId = ?";

                    try (PreparedStatement preparedStatement = connection.prepareStatement(sqlQuery)) {
                        // Set the parameters for the prepared statement

                        preparedStatement.setString(1, tfCourseID.getText().trim());

                        try (ResultSet resultSet = preparedStatement.executeQuery()) {
                            // Create a DefaultTableModel to hold the data
                            DefaultTableModel model = new DefaultTableModel();
                            model.addColumn("Grading ID");
                            model.addColumn("Student Name");
                            model.addColumn("Class");
                            model.addColumn("Section");
                            model.addColumn("Roll");
                            model.addColumn("Course ID");
                            model.addColumn("Course Name");
                            model.addColumn("Teacher Name");
                            model.addColumn("Obtained Mark");
                            model.addColumn("Obtained Grade");
                            model.addColumn("Is Passed");

                            // Populate the table model with data from the result set
                            while (resultSet.next()) {
                                Object[] rowData = new Object[11];
                                rowData[0] = resultSet.getInt("gradingid");
                                rowData[1] = resultSet.getString("studentName");
                                rowData[2] = resultSet.getInt("studentClass");
                                rowData[3] = resultSet.getString("studentSection");
                                rowData[4] = resultSet.getInt("StudentRoll");
                                rowData[5] = resultSet.getString("courseId");
                                rowData[6] = resultSet.getString("courseName");
                                rowData[7] = resultSet.getString("teacherFirstName");
                                rowData[8] = resultSet.getDouble("obtainedMarks");
                                rowData[9] = resultSet.getString("obtainedGrade");
                                rowData[10] = resultSet.getBoolean("isPassed");

                                model.addRow(rowData);
                            }

                            // Create the new JTable and set its model
                            JTable newTable = new JTable(model);

                            // Show the JTable in a new JFrame
                            JFrame frame = new JFrame("Grade Information");
                            frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                            frame.getContentPane().add(new JScrollPane(newTable));
                            frame.setSize(1000, 800);
                            frame.setLocationRelativeTo(null);

                            frame.setVisible(true);

                            DefaultTableCellRenderer cellRenderer = new DefaultTableCellRenderer() {
                                @Override
                                public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                                    Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                                    c.setFont(new Font("Arial", Font.PLAIN, 18)); // Replace 18 with your desired font size
                                    return c;
                                }
                            };

                            // Apply the custom TableCellRenderer to all columns in the table
                            for (int i = 0; i < newTable.getColumnCount(); i++) {
                                newTable.getColumnModel().getColumn(i).setCellRenderer(cellRenderer);
                            }
                        }
                    }
                } catch (SQLException e) {
                    e.printStackTrace();
                }
                // based on value 3 ends here
            } else if (basedOn == 4) {
                try (Connection connection = DriverManager.getConnection(jdbcUrl, username, password)) {
                    // Prepare the SQL SELECT query with JOIN operation
                    String sqlQuery = "SELECT g.gradingId, s.studentFirstName + ' ' + s.studentLastName AS studentName, "
                            + "g.studentClass, g.studentSection, g.studentRoll, g.courseId, c.courseName, "
                            + "t.teacherFirstName, g.obtainedMarks, g.obtainedGrade, g.isPassed "
                            + "FROM GradeTable g "
                            + "JOIN StudentTable s ON g.studentId = s.studentId "
                            + "JOIN CourseTable c ON g.courseId = c.courseId "
                            + "JOIN TeacherTable t ON g.teacherId = t.teacherId ";

                    try (PreparedStatement preparedStatement = connection.prepareStatement(sqlQuery)) {
                        // Set the parameters for the prepared statement

                        try (ResultSet resultSet = preparedStatement.executeQuery()) {
                            // Create a DefaultTableModel to hold the data
                            DefaultTableModel model = new DefaultTableModel();
                            model.addColumn("Grading ID");
                            model.addColumn("Student Name");
                            model.addColumn("Class");
                            model.addColumn("Section");
                            model.addColumn("Roll");
                            model.addColumn("Course ID");
                            model.addColumn("Course Name");
                            model.addColumn("Teacher Name");
                            model.addColumn("Obtained Mark");
                            model.addColumn("Obtained Grade");
                            model.addColumn("Is Passed");

                            // Populate the table model with data from the result set
                            while (resultSet.next()) {
                                Object[] rowData = new Object[11];
                                rowData[0] = resultSet.getInt("gradingid");
                                rowData[1] = resultSet.getString("studentName");
                                rowData[2] = resultSet.getInt("studentClass");
                                rowData[3] = resultSet.getString("studentSection");
                                rowData[4] = resultSet.getInt("StudentRoll");
                                rowData[5] = resultSet.getString("courseId");
                                rowData[6] = resultSet.getString("courseName");
                                rowData[7] = resultSet.getString("teacherFirstName");
                                rowData[8] = resultSet.getDouble("obtainedMarks");
                                rowData[9] = resultSet.getString("obtainedGrade");
                                rowData[10] = resultSet.getBoolean("isPassed");

                                model.addRow(rowData);
                            }

                            // Create the new JTable and set its model
                            JTable newTable = new JTable(model);

                            // Show the JTable in a new JFrame
                            JFrame frame = new JFrame("Grade Information");
                            frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                            frame.getContentPane().add(new JScrollPane(newTable));
                            frame.setSize(1000, 800);
                            frame.setLocationRelativeTo(null);

                            frame.setVisible(true);

                            DefaultTableCellRenderer cellRenderer = new DefaultTableCellRenderer() {
                                @Override
                                public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                                    Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                                    c.setFont(new Font("Arial", Font.PLAIN, 18)); // Replace 18 with your desired font size
                                    return c;
                                }
                            };

                            // Apply the custom TableCellRenderer to all columns in the table
                            for (int i = 0; i < newTable.getColumnCount(); i++) {
                                newTable.getColumnModel().getColumn(i).setCellRenderer(cellRenderer);
                            }
                        }
                    }
                } catch (SQLException e) {
                    e.printStackTrace();
                }

                /// based on valure 4 ends here 
            }
        } else if (senderperson.equalsIgnoreCase("teacher")) {

            String courseid = tfCourseID.getText().trim();
            try {
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                Connection connection = DriverManager
                        .getConnection(
                                "jdbc:sqlserver://localhost:1433;databaseName=RainbowPrimarySchool;selectMethod=cursor", "sa", "123456");
                String sqlQuery = "select courseId from EnrollmentTable where teacherId =?";
                PreparedStatement statement = connection.prepareStatement(sqlQuery);

                statement.setInt(1, senderid);

                ResultSet resultSet = statement.executeQuery();

                if (resultSet.next()) {

                    String CourseString = resultSet.getString("courseId");
                    if (CourseString.equals(courseid)) {
                        if (basedOn == 0) {

                            try (Connection connection2 = DriverManager.getConnection(jdbcUrl, username, password)) {
                                // Prepare the SQL SELECT query with JOIN operation
                                String sqlQuery2 = "SELECT g.gradingId, s.studentFirstName + ' ' + s.studentLastName AS studentName, "
                                        + "g.studentClass, g.studentSection, g.studentRoll, g.courseId, c.courseName, "
                                        + "t.teacherFirstName, g.obtainedMarks, g.obtainedGrade, g.isPassed "
                                        + "FROM GradeTable g "
                                        + "JOIN StudentTable s ON g.studentId = s.studentId "
                                        + "JOIN CourseTable c ON g.courseId = c.courseId "
                                        + "JOIN TeacherTable t ON g.teacherId = t.teacherId "
                                        + "WHERE g.studentClass = ? AND g.studentSection = ? AND g.studentRoll = ? AND g.courseId = ?";

                                try (PreparedStatement preparedStatement = connection.prepareStatement(sqlQuery2)) {
                                    // Set the parameters for the prepared statement
                                    preparedStatement.setInt(1, Integer.parseInt(tfClass.getText().trim()));
                                    preparedStatement.setString(2, tfSection.getText());
                                    preparedStatement.setInt(3, Integer.parseInt(tfRoll.getText().trim()));
                                    preparedStatement.setString(4, tfCourseID.getText().trim());

                                    try (ResultSet resultSet2 = preparedStatement.executeQuery()) {
                                        // Create a DefaultTableModel to hold the data
                                        DefaultTableModel model = new DefaultTableModel();
                                        model.addColumn("Grading ID");
                                        model.addColumn("Student Name");
                                        model.addColumn("Class");
                                        model.addColumn("Section");
                                        model.addColumn("Roll");
                                        model.addColumn("Course ID");
                                        model.addColumn("Course Name");
                                        model.addColumn("Teacher Name");
                                        model.addColumn("Obtained Mark");
                                        model.addColumn("Obtained Grade");
                                        model.addColumn("Is Passed");

                                        // Populate the table model with data from the result set
                                        while (resultSet2.next()) {
                                            Object[] rowData = new Object[11];
                                            rowData[0] = resultSet2.getInt("gradingid");
                                            rowData[1] = resultSet2.getString("studentName");
                                            rowData[2] = resultSet2.getInt("studentClass");
                                            rowData[3] = resultSet2.getString("studentSection");
                                            rowData[4] = resultSet2.getInt("StudentRoll");
                                            rowData[5] = resultSet2.getString("courseId");
                                            rowData[6] = resultSet2.getString("courseName");
                                            rowData[7] = resultSet2.getString("teacherFirstName");
                                            rowData[8] = resultSet2.getDouble("obtainedMarks");
                                            rowData[9] = resultSet2.getString("obtainedGrade");
                                            rowData[10] = resultSet2.getBoolean("isPassed");

                                            model.addRow(rowData);
                                        }

                                        // Create the new JTable and set its model
                                        JTable newTable = new JTable(model);

                                        // Show the JTable in a new JFrame
                                        JFrame frame = new JFrame("Grade Information");
                                        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                                        frame.getContentPane().add(new JScrollPane(newTable));
                                        frame.setSize(1000, 800);
                                        frame.setLocationRelativeTo(null);

                                        frame.setVisible(true);

                                        DefaultTableCellRenderer cellRenderer = new DefaultTableCellRenderer() {
                                            @Override
                                            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                                                Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                                                c.setFont(new Font("Arial", Font.PLAIN, 18)); // Replace 18 with your desired font size
                                                return c;
                                            }
                                        };

                                        // Apply the custom TableCellRenderer to all columns in the table
                                        for (int i = 0; i < newTable.getColumnCount(); i++) {
                                            newTable.getColumnModel().getColumn(i).setCellRenderer(cellRenderer);
                                        }
                                    }
                                }
                            } catch (SQLException e) {
                                e.printStackTrace();
                            }

                            /// first if ends here 
                        } else if (basedOn == 1) {

                            try (Connection connection2 = DriverManager.getConnection(jdbcUrl, username, password)) {
                                // Prepare the SQL SELECT query with JOIN operation
                                String sqlQuery2 = "SELECT g.gradingId, s.studentFirstName + ' ' + s.studentLastName AS studentName, "
                                        + "g.studentClass, g.studentSection, g.studentRoll, g.courseId, c.courseName, "
                                        + "t.teacherFirstName, g.obtainedMarks, g.obtainedGrade, g.isPassed "
                                        + "FROM GradeTable g "
                                        + "JOIN StudentTable s ON g.studentId = s.studentId "
                                        + "JOIN CourseTable c ON g.courseId = c.courseId "
                                        + "JOIN TeacherTable t ON g.teacherId = t.teacherId "
                                        + "WHERE g.studentClass = ? ";

                                try (PreparedStatement preparedStatement = connection2.prepareStatement(sqlQuery2)) {
                                    // Set the parameters for the prepared statement
                                    preparedStatement.setInt(1, Integer.parseInt(tfClass.getText().trim()));

                                    try (ResultSet resultSet2 = preparedStatement.executeQuery()) {
                                        // Create a DefaultTableModel to hold the data
                                        DefaultTableModel model = new DefaultTableModel();
                                        model.addColumn("Grading ID");
                                        model.addColumn("Student Name");
                                        model.addColumn("Class");
                                        model.addColumn("Section");
                                        model.addColumn("Roll");
                                        model.addColumn("Course ID");
                                        model.addColumn("Course Name");
                                        model.addColumn("Teacher Name");
                                        model.addColumn("Obtained Mark");
                                        model.addColumn("Obtained Grade");
                                        model.addColumn("Is Passed");

                                        // Populate the table model with data from the result set
                                        while (resultSet2.next()) {
                                            Object[] rowData = new Object[11];
                                            rowData[0] = resultSet2.getInt("gradingid");
                                            rowData[1] = resultSet2.getString("studentName");
                                            rowData[2] = resultSet2.getInt("studentClass");
                                            rowData[3] = resultSet2.getString("studentSection");
                                            rowData[4] = resultSet2.getInt("StudentRoll");
                                            rowData[5] = resultSet2.getString("courseId");
                                            rowData[6] = resultSet2.getString("courseName");
                                            rowData[7] = resultSet2.getString("teacherFirstName");
                                            rowData[8] = resultSet2.getDouble("obtainedMarks");
                                            rowData[9] = resultSet2.getString("obtainedGrade");
                                            rowData[10] = resultSet2.getBoolean("isPassed");

                                            model.addRow(rowData);
                                        }

                                        // Create the new JTable and set its model
                                        JTable newTable = new JTable(model);

                                        // Show the JTable in a new JFrame
                                        JFrame frame = new JFrame("Grade Information");
                                        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                                        frame.getContentPane().add(new JScrollPane(newTable));
                                        frame.setSize(1000, 800);
                                        frame.setLocationRelativeTo(null);

                                        frame.setVisible(true);

                                        DefaultTableCellRenderer cellRenderer = new DefaultTableCellRenderer() {
                                            @Override
                                            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                                                Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                                                c.setFont(new Font("Arial", Font.PLAIN, 18)); // Replace 18 with your desired font size
                                                return c;
                                            }
                                        };

                                        // Apply the custom TableCellRenderer to all columns in the table
                                        for (int i = 0; i < newTable.getColumnCount(); i++) {
                                            newTable.getColumnModel().getColumn(i).setCellRenderer(cellRenderer);
                                        }
                                    }
                                }
                            } catch (SQLException e) {
                                e.printStackTrace();
                            }

                            /// based on value 1 if ends here 
                        } else if (basedOn == 2) {
                            try (Connection connection2 = DriverManager.getConnection(jdbcUrl, username, password)) {
                                // Prepare the SQL SELECT query with JOIN operation
                                String sqlQuery2 = "SELECT g.gradingId, s.studentFirstName + ' ' + s.studentLastName AS studentName, "
                                        + "g.studentClass, g.studentSection, g.studentRoll, g.courseId, c.courseName, "
                                        + "t.teacherFirstName, g.obtainedMarks, g.obtainedGrade, g.isPassed "
                                        + "FROM GradeTable g "
                                        + "JOIN StudentTable s ON g.studentId = s.studentId "
                                        + "JOIN CourseTable c ON g.courseId = c.courseId "
                                        + "JOIN TeacherTable t ON g.teacherId = t.teacherId "
                                        + "WHERE g.studentClass = ? AND g.studentSection = ? ";

                                try (PreparedStatement preparedStatement = connection2.prepareStatement(sqlQuery2)) {
                                    // Set the parameters for the prepared statement
                                    preparedStatement.setInt(1, Integer.parseInt(tfClass.getText().trim()));
                                    preparedStatement.setString(2, tfSection.getText().trim());

                                    try (ResultSet resultSet2 = preparedStatement.executeQuery()) {
                                        // Create a DefaultTableModel to hold the data
                                        DefaultTableModel model = new DefaultTableModel();
                                        model.addColumn("Grading ID");
                                        model.addColumn("Student Name");
                                        model.addColumn("Class");
                                        model.addColumn("Section");
                                        model.addColumn("Roll");
                                        model.addColumn("Course ID");
                                        model.addColumn("Course Name");
                                        model.addColumn("Teacher Name");
                                        model.addColumn("Obtained Mark");
                                        model.addColumn("Obtained Grade");
                                        model.addColumn("Is Passed");

                                        // Populate the table model with data from the result set
                                        while (resultSet2.next()) {
                                            Object[] rowData = new Object[11];
                                            rowData[0] = resultSet2.getInt("gradingid");
                                            rowData[1] = resultSet2.getString("studentName");
                                            rowData[2] = resultSet2.getInt("studentClass");
                                            rowData[3] = resultSet2.getString("studentSection");
                                            rowData[4] = resultSet2.getInt("StudentRoll");
                                            rowData[5] = resultSet2.getString("courseId");
                                            rowData[6] = resultSet2.getString("courseName");
                                            rowData[7] = resultSet2.getString("teacherFirstName");
                                            rowData[8] = resultSet2.getDouble("obtainedMarks");
                                            rowData[9] = resultSet2.getString("obtainedGrade");
                                            rowData[10] = resultSet2.getBoolean("isPassed");

                                            model.addRow(rowData);
                                        }

                                        // Create the new JTable and set its model
                                        JTable newTable = new JTable(model);

                                        // Show the JTable in a new JFrame
                                        JFrame frame = new JFrame("Grade Information");
                                        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                                        frame.getContentPane().add(new JScrollPane(newTable));
                                        frame.setSize(1000, 800);
                                        frame.setLocationRelativeTo(null);

                                        frame.setVisible(true);

                                        DefaultTableCellRenderer cellRenderer = new DefaultTableCellRenderer() {
                                            @Override
                                            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                                                Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                                                c.setFont(new Font("Arial", Font.PLAIN, 18)); // Replace 18 with your desired font size
                                                return c;
                                            }
                                        };

                                        // Apply the custom TableCellRenderer to all columns in the table
                                        for (int i = 0; i < newTable.getColumnCount(); i++) {
                                            newTable.getColumnModel().getColumn(i).setCellRenderer(cellRenderer);
                                        }
                                    }
                                }
                            } catch (SQLException e) {
                                e.printStackTrace();
                            }

                            /// based on value 2 ends here 
                        } else if (basedOn == 3) {

                            try (Connection connection2 = DriverManager.getConnection(jdbcUrl, username, password)) {
                                // Prepare the SQL SELECT query with JOIN operation
                                String sqlQuery2 = "SELECT g.gradingId, s.studentFirstName + ' ' + s.studentLastName AS studentName, "
                                        + "g.studentClass, g.studentSection, g.studentRoll, g.courseId, c.courseName, "
                                        + "t.teacherFirstName, g.obtainedMarks, g.obtainedGrade, g.isPassed "
                                        + "FROM GradeTable g "
                                        + "JOIN StudentTable s ON g.studentId = s.studentId "
                                        + "JOIN CourseTable c ON g.courseId = c.courseId "
                                        + "JOIN TeacherTable t ON g.teacherId = t.teacherId "
                                        + "WHERE g.courseId = ?";

                                try (PreparedStatement preparedStatement = connection2.prepareStatement(sqlQuery2)) {
                                    // Set the parameters for the prepared statement

                                    preparedStatement.setString(1, tfCourseID.getText().trim());

                                    try (ResultSet resultSet2 = preparedStatement.executeQuery()) {
                                        // Create a DefaultTableModel to hold the data
                                        DefaultTableModel model = new DefaultTableModel();
                                        model.addColumn("Grading ID");
                                        model.addColumn("Student Name");
                                        model.addColumn("Class");
                                        model.addColumn("Section");
                                        model.addColumn("Roll");
                                        model.addColumn("Course ID");
                                        model.addColumn("Course Name");
                                        model.addColumn("Teacher Name");
                                        model.addColumn("Obtained Mark");
                                        model.addColumn("Obtained Grade");
                                        model.addColumn("Is Passed");

                                        // Populate the table model with data from the result set
                                        while (resultSet2.next()) {
                                            Object[] rowData = new Object[11];
                                            rowData[0] = resultSet2.getInt("gradingid");
                                            rowData[1] = resultSet2.getString("studentName");
                                            rowData[2] = resultSet2.getInt("studentClass");
                                            rowData[3] = resultSet2.getString("studentSection");
                                            rowData[4] = resultSet2.getInt("StudentRoll");
                                            rowData[5] = resultSet2.getString("courseId");
                                            rowData[6] = resultSet2.getString("courseName");
                                            rowData[7] = resultSet2.getString("teacherFirstName");
                                            rowData[8] = resultSet2.getDouble("obtainedMarks");
                                            rowData[9] = resultSet2.getString("obtainedGrade");
                                            rowData[10] = resultSet2.getBoolean("isPassed");

                                            model.addRow(rowData);
                                        }

                                        // Create the new JTable and set its model
                                        JTable newTable = new JTable(model);

                                        // Show the JTable in a new JFrame
                                        JFrame frame = new JFrame("Grade Information");
                                        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                                        frame.getContentPane().add(new JScrollPane(newTable));
                                        frame.setSize(1000, 800);
                                        frame.setLocationRelativeTo(null);

                                        frame.setVisible(true);

                                        DefaultTableCellRenderer cellRenderer = new DefaultTableCellRenderer() {
                                            @Override
                                            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                                                Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                                                c.setFont(new Font("Arial", Font.PLAIN, 18)); // Replace 18 with your desired font size
                                                return c;
                                            }
                                        };

                                        // Apply the custom TableCellRenderer to all columns in the table
                                        for (int i = 0; i < newTable.getColumnCount(); i++) {
                                            newTable.getColumnModel().getColumn(i).setCellRenderer(cellRenderer);
                                        }
                                    }
                                }
                            } catch (SQLException e) {
                                e.printStackTrace();
                            }
                            // based on value 3 ends here
                        } else if (basedOn == 4) {
                            try (Connection connection2 = DriverManager.getConnection(jdbcUrl, username, password)) {
                                // Prepare the SQL SELECT query with JOIN operation
                                String sqlQuery2 = "SELECT g.gradingId, s.studentFirstName + ' ' + s.studentLastName AS studentName, "
                                        + "g.studentClass, g.studentSection, g.studentRoll, g.courseId, c.courseName, "
                                        + "t.teacherFirstName, g.obtainedMarks, g.obtainedGrade, g.isPassed "
                                        + "FROM GradeTable g "
                                        + "JOIN StudentTable s ON g.studentId = s.studentId "
                                        + "JOIN CourseTable c ON g.courseId = c.courseId "
                                        + "JOIN TeacherTable t ON g.teacherId = t.teacherId ";

                                try (PreparedStatement preparedStatement = connection2.prepareStatement(sqlQuery2)) {
                                    // Set the parameters for the prepared statement

                                    try (ResultSet resultSet2 = preparedStatement.executeQuery()) {
                                        // Create a DefaultTableModel to hold the data
                                        DefaultTableModel model = new DefaultTableModel();
                                        model.addColumn("Grading ID");
                                        model.addColumn("Student Name");
                                        model.addColumn("Class");
                                        model.addColumn("Section");
                                        model.addColumn("Roll");
                                        model.addColumn("Course ID");
                                        model.addColumn("Course Name");
                                        model.addColumn("Teacher Name");
                                        model.addColumn("Obtained Mark");
                                        model.addColumn("Obtained Grade");
                                        model.addColumn("Is Passed");

                                        // Populate the table model with data from the result set
                                        while (resultSet2.next()) {
                                            Object[] rowData = new Object[11];
                                            rowData[0] = resultSet2.getInt("gradingid");
                                            rowData[1] = resultSet2.getString("studentName");
                                            rowData[2] = resultSet2.getInt("studentClass");
                                            rowData[3] = resultSet2.getString("studentSection");
                                            rowData[4] = resultSet2.getInt("StudentRoll");
                                            rowData[5] = resultSet2.getString("courseId");
                                            rowData[6] = resultSet2.getString("courseName");
                                            rowData[7] = resultSet2.getString("teacherFirstName");
                                            rowData[8] = resultSet2.getDouble("obtainedMarks");
                                            rowData[9] = resultSet2.getString("obtainedGrade");
                                            rowData[10] = resultSet2.getBoolean("isPassed");

                                            model.addRow(rowData);
                                        }

                                        // Create the new JTable and set its model
                                        JTable newTable = new JTable(model);

                                        // Show the JTable in a new JFrame
                                        JFrame frame = new JFrame("Grade Information");
                                        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                                        frame.getContentPane().add(new JScrollPane(newTable));
                                        frame.setSize(1000, 800);
                                        frame.setLocationRelativeTo(null);

                                        frame.setVisible(true);

                                        DefaultTableCellRenderer cellRenderer = new DefaultTableCellRenderer() {
                                            @Override
                                            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                                                Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                                                c.setFont(new Font("Arial", Font.PLAIN, 18)); // Replace 18 with your desired font size
                                                return c;
                                            }
                                        };

                                        // Apply the custom TableCellRenderer to all columns in the table
                                        for (int i = 0; i < newTable.getColumnCount(); i++) {
                                            newTable.getColumnModel().getColumn(i).setCellRenderer(cellRenderer);
                                        }
                                    }
                                }
                            } catch (SQLException e) {
                                e.printStackTrace();
                            }

                            /// based on valure 4 ends here 
                        }
                    } else {
                        JOptionPane.showMessageDialog(frameSeeResultbyADMINandTeacher.this, "access denied");
                    }
                } else {
                    //JOptionPane.stu
                }

            } catch (Exception e) {
            }

            /// else if person teacher condition ends here 
        }


    }//GEN-LAST:event_btnsearchActionPerformed

    private void btnUpdateDatabaseResultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateDatabaseResultActionPerformed
        // TODO add your handling code here:
        
        int confirmResult = JOptionPane.showConfirmDialog(
                this, "Are you sure you want to update the database?",
                "Confirmation", JOptionPane.YES_NO_OPTION);
        
        if (confirmResult == JOptionPane.YES_OPTION) {
            updateDatabaseAndInsertFinalGrade();
        }
         
    }//GEN-LAST:event_btnUpdateDatabaseResultActionPerformed

    private void updateDatabaseAndInsertFinalGrade() {
        try {
            // Establish a database connection
            String jdbcUrl = "jdbc:sqlserver://localhost:1433;databaseName=RainbowPrimarySchool";
            String username = "sa";
            String password = "123456";
            Connection connection = DriverManager.getConnection(jdbcUrl, username, password);
            
            // Fetch data from your database (for example, fetch student IDs)
            String fetchStudentIdsSQL = "SELECT studentId FROM StudentTable";
            PreparedStatement fetchStatement = connection.prepareStatement(fetchStudentIdsSQL);
            ResultSet resultSet = fetchStatement.executeQuery();

            while (resultSet.next()) {
                int studentId = resultSet.getInt("studentId");

                // Calculate totalObtainedMarks and isAllCoursesPassed for the current student
                double totalObtainedMarks = calculateTotalObtainedMarks(studentId, connection);
                boolean isAllCoursesPassed = checkAllCoursesPassed(studentId, connection);

                // Example SQL statements (replace with actual queries)
                String insertFinalGradeSQL = "INSERT INTO FinalGradeTable (studentId, totalObtainedMarks, isAllCoursesPassed) VALUES (?, ?, ?)";
                String updateStudentCurrentClassSQL = "UPDATE StudentTable SET studentCurentClass = studentCurentClass + 1 WHERE studentId = ?";

                // Prepare and execute insert query
                PreparedStatement insertStatement = connection.prepareStatement(insertFinalGradeSQL);
                insertStatement.setInt(1, studentId);
                insertStatement.setDouble(2, totalObtainedMarks);
                insertStatement.setBoolean(3, isAllCoursesPassed);
                insertStatement.executeUpdate();
                insertStatement.close();

                // Prepare and execute update query if all courses are passed
                if (isAllCoursesPassed) {
                    PreparedStatement updateStatement = connection.prepareStatement(updateStudentCurrentClassSQL);
                    updateStatement.setInt(1, studentId);
                    updateStatement.executeUpdate();
                    updateStatement.close();
                }
            }

            // Close result set and fetch statement
            resultSet.close();
            fetchStatement.close();
            
            // Don't forget to close the connection
            connection.close();
            
            // Inform the user that the update was successful
            JOptionPane.showMessageDialog(this, "Database updated successfully.");
            
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "An error occurred while updating the database.");
        }
    }
    
    
    private double calculateTotalObtainedMarks(int studentId, Connection connection) {
        double totalObtainedMarks = 0.0;

         try {
             // Query the GradeTable to fetch obtained marks for the student's courses
             String fetchMarksSQL = "SELECT obtainedMarks FROM GradeTable WHERE studentId = ?";
             PreparedStatement fetchStatement = connection.prepareStatement(fetchMarksSQL);
             fetchStatement.setInt(1, studentId);

             ResultSet resultSet = fetchStatement.executeQuery();

             while (resultSet.next()) {
                 double obtainedMarks = resultSet.getDouble("obtainedMarks");
                 totalObtainedMarks += obtainedMarks;
             }

             resultSet.close();
             fetchStatement.close();
         } catch (SQLException ex) {
             ex.printStackTrace();
         }

         return totalObtainedMarks;
    }

    private boolean checkAllCoursesPassed(int studentId, Connection connection) {
        boolean allCoursesPassed = true;
    
        try {
            // Query the GradeTable to check if any course for the student is not passed
            String checkCoursesPassedSQL = "SELECT isPassed FROM GradeTable WHERE studentId = ?";
            PreparedStatement checkStatement = connection.prepareStatement(checkCoursesPassedSQL);
            checkStatement.setInt(1, studentId);

            ResultSet resultSet = checkStatement.executeQuery();

            while (resultSet.next()) {
                boolean isPassed = resultSet.getBoolean("isPassed");
                if (!isPassed) {
                    allCoursesPassed = false;
                    break; // No need to continue checking if any course is not passed
                }
            }

            resultSet.close();
            checkStatement.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }

        return allCoursesPassed;
    }
        /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frameSeeResultbyADMINandTeacher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frameSeeResultbyADMINandTeacher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frameSeeResultbyADMINandTeacher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frameSeeResultbyADMINandTeacher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frameSeeResultbyADMINandTeacher().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnUpdateDatabaseResult;
    private javax.swing.JButton btnsearch;
    private javax.swing.JComboBox<String> comboBasedOn;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel lblBackground;
    private javax.swing.JLabel lblResultHead;
    private javax.swing.JTextField tfClass;
    private javax.swing.JTextField tfCourseID;
    private javax.swing.JTextField tfRoll;
    private javax.swing.JTextField tfSection;
    // End of variables declaration//GEN-END:variables
}
