
import java.awt.Component;
import java.awt.Font;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author sakib
 */
public class frameStudentSeeResult extends javax.swing.JFrame {

    
            String jdbcUrl = "jdbc:sqlserver://localhost:1433;databaseName=RainbowPrimarySchool";
        String username = "sa";
        String password = "123456";
        
    public int studentID;
    /**
     * Creates new form frameStudentSeeResult
     */
    public frameStudentSeeResult() {
        initComponents();
        setSize(1000,800);
    }
    public void setComponentsStudentSeeResult(int id){
        studentID = id;
    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel5 = new javax.swing.JLabel();
        comboBasedOn = new javax.swing.JComboBox<>();
        tfClass = new javax.swing.JTextField();
        btnBackFromStudentSeerESULT = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        lblResultHead = new javax.swing.JLabel();
        tfCourseID = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        btnSearch = new javax.swing.JButton();
        lblBackground = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Based on ");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 290, 200, 30));

        comboBasedOn.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        comboBasedOn.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Class And Course", "Class", "Course" }));
        comboBasedOn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBasedOnActionPerformed(evt);
            }
        });
        getContentPane().add(comboBasedOn, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 327, 200, 40));

        tfClass.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        getContentPane().add(tfClass, new org.netbeans.lib.awtextra.AbsoluteConstraints(212, 218, 200, 40));

        btnBackFromStudentSeerESULT.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnBackFromStudentSeerESULT.setText("Back");
        btnBackFromStudentSeerESULT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackFromStudentSeerESULTActionPerformed(evt);
            }
        });
        getContentPane().add(btnBackFromStudentSeerESULT, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 37, 100, 46));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Course ID:");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(539, 170, 200, 40));

        lblResultHead.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lblResultHead.setForeground(new java.awt.Color(255, 255, 255));
        lblResultHead.setText("Student see result");
        getContentPane().add(lblResultHead, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 33, -1, 46));

        tfCourseID.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tfCourseID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfCourseIDActionPerformed(evt);
            }
        });
        getContentPane().add(tfCourseID, new org.netbeans.lib.awtextra.AbsoluteConstraints(539, 218, 200, 40));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Class:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(212, 181, 200, 30));

        btnSearch.setBackground(new java.awt.Color(51, 204, 0));
        btnSearch.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });
        getContentPane().add(btnSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(321, 422, 334, 72));

        lblBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/ComnmonBG.png"))); // NOI18N
        getContentPane().add(lblBackground, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1000, 800));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void comboBasedOnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBasedOnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboBasedOnActionPerformed

    private void btnBackFromStudentSeerESULTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackFromStudentSeerESULTActionPerformed
        // TODO add your handling code here:
        frameStudentHomePage studentHomePage = new frameStudentHomePage();
        studentHomePage.SetComponentsStudentHomePage(studentID);
        studentHomePage.setVisible(true);
        setVisible(false);
        
    }//GEN-LAST:event_btnBackFromStudentSeerESULTActionPerformed

    private void tfCourseIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfCourseIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfCourseIDActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        int basedOn = comboBasedOn.getSelectedIndex();
        if (basedOn==0) {
            String sqlQuery = null;
            try (Connection connection = DriverManager.getConnection(jdbcUrl, username, password)) {
                // Prepare the SQL SELECT query with JOIN operation

                sqlQuery = "SELECT g.courseId, c.courseName, g.studentId, " +
                    "s.studentFirstName + ' ' + s.studentLastName AS studentName, " +
                    "g.studentClass, g.studentSection, g.studentRoll, g.obtainedMarks, " +
                    "g.obtainedGrade " +
                    "FROM GradeTable g " +
                    "JOIN CourseTable c ON g.courseId = c.courseId " +
                    "JOIN StudentTable s ON g.studentId = s.studentId "
                        + "WHERE g.studentId = " + studentID;

                try (PreparedStatement preparedStatement = connection.prepareStatement(sqlQuery)) {
                    // Set the parameters for the prepared statement

                    try (ResultSet resultSet = preparedStatement.executeQuery()) {
                        // Create a DefaultTableModel to hold the data
                        DefaultTableModel model = new DefaultTableModel();
                        model.addColumn("Course ID");
                        model.addColumn("Course Name");
                        model.addColumn("Student ID");
                        model.addColumn("Student Name");
                        model.addColumn("Class");
                        model.addColumn("Section");
                        model.addColumn("Roll");
                        model.addColumn("Obtained Marks");
                        model.addColumn("Obtained Grade");

                        // Populate the table model with data from the result set
                        while (resultSet.next()) {
                            Object[] rowData = new Object[9];
                            rowData[0] = resultSet.getString("courseId");
                            rowData[1] = resultSet.getString("courseName");
                            rowData[2] = resultSet.getInt("studentId");
                            rowData[3] = resultSet.getString("studentName");
                            rowData[4] = resultSet.getInt("studentClass");
                            rowData[5] = resultSet.getString("studentSection");
                            rowData[6] = resultSet.getInt("studentRoll");
                            rowData[7] = resultSet.getDouble("obtainedMarks");
                            rowData[8] = resultSet.getString("obtainedGrade");

                            model.addRow(rowData);
                        }

                        // Create the new JTable and set its model
                        JTable newTable = new JTable(model);

                        // Show the JTable in a new JFrame
                        JFrame frame = new JFrame("Transaction Information");
                        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                        frame.getContentPane().add(new JScrollPane(newTable));
                        frame.setSize(1000, 800);
                        frame.setLocationRelativeTo(null);

                        frame.setVisible(true);

                        DefaultTableCellRenderer cellRenderer = new DefaultTableCellRenderer() {
                            @Override
                            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                                Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                                c.setFont(new Font("Arial", Font.PLAIN, 18)); // Replace 18 with your desired font size
                                return c;
                            }
                        };

                        // Apply the custom TableCellRenderer to all columns in the table
                        for (int i = 0; i < newTable.getColumnCount(); i++) {
                            newTable.getColumnModel().getColumn(i).setCellRenderer(cellRenderer);
                        }
                    }
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }else if (basedOn == 1) {// class****************************************************************************************************************
            
            
            String sqlQuery = null;
            try (Connection connection = DriverManager.getConnection(jdbcUrl, username, password)) {
                // Prepare the SQL SELECT query with JOIN operation

                sqlQuery = "SELECT g.courseId, c.courseName, g.studentId, " +
                    "s.studentFirstName + ' ' + s.studentLastName AS studentName, " +
                    "g.studentClass, g.studentSection, g.studentRoll, g.obtainedMarks, " +
                    "g.obtainedGrade " +
                    "FROM GradeTable g " +
                    "JOIN CourseTable c ON g.courseId = c.courseId " +
                    "JOIN StudentTable s ON g.studentId = s.studentId "
                        + "WHERE g.studentId = " + studentID+" AND g.studentClass = "+tfClass.getText();

                try (PreparedStatement preparedStatement = connection.prepareStatement(sqlQuery)) {
                    // Set the parameters for the prepared statement

                    try (ResultSet resultSet = preparedStatement.executeQuery()) {
                        // Create a DefaultTableModel to hold the data
                        DefaultTableModel model = new DefaultTableModel();
                        model.addColumn("Course ID");
                        model.addColumn("Course Name");
                        model.addColumn("Student ID");
                        model.addColumn("Student Name");
                        model.addColumn("Class");
                        model.addColumn("Section");
                        model.addColumn("Roll");
                        model.addColumn("Obtained Marks");
                        model.addColumn("Obtained Grade");

                        // Populate the table model with data from the result set
                        while (resultSet.next()) {
                            Object[] rowData = new Object[9];
                            rowData[0] = resultSet.getString("courseId");
                            rowData[1] = resultSet.getString("courseName");
                            rowData[2] = resultSet.getInt("studentId");
                            rowData[3] = resultSet.getString("studentName");
                            rowData[4] = resultSet.getInt("studentClass");
                            rowData[5] = resultSet.getString("studentSection");
                            rowData[6] = resultSet.getInt("studentRoll");
                            rowData[7] = resultSet.getDouble("obtainedMarks");
                            rowData[8] = resultSet.getString("obtainedGrade");

                            model.addRow(rowData);
                        }

                        // Create the new JTable and set its model
                        JTable newTable = new JTable(model);

                        // Show the JTable in a new JFrame
                        JFrame frame = new JFrame("Transaction Information");
                        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                        frame.getContentPane().add(new JScrollPane(newTable));
                        frame.setSize(1000, 800);
                        frame.setLocationRelativeTo(null);

                        frame.setVisible(true);

                        DefaultTableCellRenderer cellRenderer = new DefaultTableCellRenderer() {
                            @Override
                            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                                Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                                c.setFont(new Font("Arial", Font.PLAIN, 18)); // Replace 18 with your desired font size
                                return c;
                            }
                        };

                        // Apply the custom TableCellRenderer to all columns in the table
                        for (int i = 0; i < newTable.getColumnCount(); i++) {
                            newTable.getColumnModel().getColumn(i).setCellRenderer(cellRenderer);
                        }
                    }
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
            
            
        }else if (basedOn == 2) {// course***************************************************************************************************
            
            
            String sqlQuery = null;
            try (Connection connection = DriverManager.getConnection(jdbcUrl, username, password)) {
                // Prepare the SQL SELECT query with JOIN operation

                sqlQuery = "SELECT g.courseId, c.courseName, g.studentId, " +
                    "s.studentFirstName + ' ' + s.studentLastName AS studentName, " +
                    "g.studentClass, g.studentSection, g.studentRoll, g.obtainedMarks, " +
                    "g.obtainedGrade " +
                    "FROM GradeTable g " +
                    "JOIN CourseTable c ON g.courseId = c.courseId " +
                    "JOIN StudentTable s ON g.studentId = s.studentId "
                        + "WHERE g.studentId = " + studentID+" AND g.courseId = '"+tfCourseID.getText()+"'";

                try (PreparedStatement preparedStatement = connection.prepareStatement(sqlQuery)) {
                    // Set the parameters for the prepared statement

                    try (ResultSet resultSet = preparedStatement.executeQuery()) {
                        // Create a DefaultTableModel to hold the data
                        DefaultTableModel model = new DefaultTableModel();
                        model.addColumn("Course ID");
                        model.addColumn("Course Name");
                        model.addColumn("Student ID");
                        model.addColumn("Student Name");
                        model.addColumn("Class");
                        model.addColumn("Section");
                        model.addColumn("Roll");
                        model.addColumn("Obtained Marks");
                        model.addColumn("Obtained Grade");

                        // Populate the table model with data from the result set
                        while (resultSet.next()) {
                            Object[] rowData = new Object[9];
                            rowData[0] = resultSet.getString("courseId");
                            rowData[1] = resultSet.getString("courseName");
                            rowData[2] = resultSet.getInt("studentId");
                            rowData[3] = resultSet.getString("studentName");
                            rowData[4] = resultSet.getInt("studentClass");
                            rowData[5] = resultSet.getString("studentSection");
                            rowData[6] = resultSet.getInt("studentRoll");
                            rowData[7] = resultSet.getDouble("obtainedMarks");
                            rowData[8] = resultSet.getString("obtainedGrade");

                            model.addRow(rowData);
                        }

                        // Create the new JTable and set its model
                        JTable newTable = new JTable(model);

                        // Show the JTable in a new JFrame
                        JFrame frame = new JFrame("Transaction Information");
                        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                        frame.getContentPane().add(new JScrollPane(newTable));
                        frame.setSize(1000, 800);
                        frame.setLocationRelativeTo(null);

                        frame.setVisible(true);

                        DefaultTableCellRenderer cellRenderer = new DefaultTableCellRenderer() {
                            @Override
                            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                                Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                                c.setFont(new Font("Arial", Font.PLAIN, 18)); // Replace 18 with your desired font size
                                return c;
                            }
                        };

                        // Apply the custom TableCellRenderer to all columns in the table
                        for (int i = 0; i < newTable.getColumnCount(); i++) {
                            newTable.getColumnModel().getColumn(i).setCellRenderer(cellRenderer);
                        }
                    }
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
            
            
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frameStudentSeeResult.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frameStudentSeeResult.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frameStudentSeeResult.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frameStudentSeeResult.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frameStudentSeeResult().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBackFromStudentSeerESULT;
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox<String> comboBasedOn;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel lblBackground;
    private javax.swing.JLabel lblResultHead;
    private javax.swing.JTextField tfClass;
    private javax.swing.JTextField tfCourseID;
    // End of variables declaration//GEN-END:variables
}
