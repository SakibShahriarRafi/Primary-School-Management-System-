
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.sql.*;
import java.awt.*;
import java.text.SimpleDateFormat;
import javax.swing.table.DefaultTableCellRenderer;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author sakib
 */
public class frameManagePaymentbyADMIN extends javax.swing.JFrame {

    private JTable table;
    private DefaultTableModel tableModel;

    String jdbcUrl = "jdbc:sqlserver://localhost:1433;databaseName=RainbowPrimarySchool";
    String username = "sa";
    String password = "123456";

    /**
     * Creates new form framePaymentSyatembyADMIN
     */
    public frameManagePaymentbyADMIN() {
        initComponents();
        setSize(1000, 800);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        btnSeePayments = new javax.swing.JButton();
        tfAccountNo = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        comboBasedOn = new javax.swing.JComboBox<>();
        lblBackground = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 36, 101, 51));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("ADMIN Payment-System");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(326, 35, -1, 46));

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton2.setText("Make Payment");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(82, 161, 846, 53));

        btnSeePayments.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnSeePayments.setText("See Payments");
        btnSeePayments.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSeePaymentsActionPerformed(evt);
            }
        });
        getContentPane().add(btnSeePayments, new org.netbeans.lib.awtextra.AbsoluteConstraints(215, 442, 197, 72));

        tfAccountNo.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tfAccountNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfAccountNoActionPerformed(evt);
            }
        });
        getContentPane().add(tfAccountNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(322, 359, 400, 40));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Account No");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(322, 312, 200, 40));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Based On: ");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(82, 312, 200, 40));

        comboBasedOn.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        comboBasedOn.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Student", "Teacher", "Staff", "All Students", "All Teahers", "All Staffs", "All Transactions " }));
        getContentPane().add(comboBasedOn, new org.netbeans.lib.awtextra.AbsoluteConstraints(82, 359, 200, 40));

        lblBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/ComnmonBG.png"))); // NOI18N
        getContentPane().add(lblBackground, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1000, 800));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnSeePaymentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSeePaymentsActionPerformed
        // TODO add your handling code here:
        int basedon = comboBasedOn.getSelectedIndex();
        String accountNo = tfAccountNo.getText();
        SimpleDateFormat dtformat = new SimpleDateFormat("yyyy-MM-dd");
        // ps.setString(3, dtformat.format(dateBirthday.getDate()));
        if (basedon == 0) { // for students ************************************************************************************************************
            String sqlQuery = null;
            try (Connection connection = DriverManager.getConnection(jdbcUrl, username, password)) {
                // Prepare the SQL SELECT query with JOIN operation

                sqlQuery = "SELECT tt.transactionid, tt.studentID, CONCAT(st.studentFirstName, ' ', st.studentLastName) AS studentName, tt.account_no, tt.paidAmount, tt.payable_money, tt.transactionMonth, tt.transactiondate "
                        + "FROM TransactionTable tt "
                        + "INNER JOIN StudentTable st ON tt.studentID = st.studentId "
                        + "WHERE tt.account_no = '" + accountNo + "'";

                try (PreparedStatement preparedStatement = connection.prepareStatement(sqlQuery)) {
                    // Set the parameters for the prepared statement

                    try (ResultSet resultSet = preparedStatement.executeQuery()) {
                        // Create a DefaultTableModel to hold the data
                        DefaultTableModel model = new DefaultTableModel();
                        model.addColumn("TransactionId");
                        model.addColumn("StudenID");
                        model.addColumn("Student Name");
                        model.addColumn("Account no");
                        model.addColumn("Paid Amount");
                        model.addColumn("Payable Money");
                        model.addColumn("Month");
                        model.addColumn("Date");

                        // Populate the table model with data from the result set
                        while (resultSet.next()) {
                            Object[] rowData = new Object[8];
                            rowData[0] = resultSet.getInt("transactionid");
                            rowData[1] = resultSet.getInt("studentID");
                            rowData[2] = resultSet.getString("studentName");
                            rowData[3] = resultSet.getString("account_no");
                            rowData[4] = resultSet.getDouble("paidAmount");
                            rowData[5] = resultSet.getDouble("payable_money");
                            rowData[6] = resultSet.getString("transactionMonth");
                            rowData[7] = resultSet.getString("transactiondate");

                            model.addRow(rowData);
                        }

                        // Create the new JTable and set its model
                        JTable newTable = new JTable(model);

                        // Show the JTable in a new JFrame
                        JFrame frame = new JFrame("Transaction Information");
                        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                        frame.getContentPane().add(new JScrollPane(newTable));
                        frame.setSize(1000, 800);
                        frame.setLocationRelativeTo(null);

                        frame.setVisible(true);

                        DefaultTableCellRenderer cellRenderer = new DefaultTableCellRenderer() {
                            @Override
                            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                                Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                                c.setFont(new Font("Arial", Font.PLAIN, 18)); // Replace 18 with your desired font size
                                return c;
                            }
                        };

                        // Apply the custom TableCellRenderer to all columns in the table
                        for (int i = 0; i < newTable.getColumnCount(); i++) {
                            newTable.getColumnModel().getColumn(i).setCellRenderer(cellRenderer);
                        }
                    }
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }

        } else if (basedon == 1) { // for teacher**********************************************************************************************************

            String sqlQuery = null;
            try (Connection connection = DriverManager.getConnection(jdbcUrl, username, password)) {
                // Prepare the SQL SELECT query with JOIN operation

                sqlQuery = "SELECT tt.transactionid, tt.teacherId, CONCAT(st.teacherFirstName, ' ', st.teacherLastName) AS teacherName, tt.account_no, tt.paidAmount, tt.payable_money, tt.transactionMonth, tt.transactiondate "
                        + "FROM TransactionTable tt "
                        + "INNER JOIN TeacherTable st ON tt.teacherId = st.teacherId "
                        + "WHERE tt.account_no = '" + accountNo + "'";

                try (PreparedStatement preparedStatement = connection.prepareStatement(sqlQuery)) {
                    // Set the parameters for the prepared statement

                    try (ResultSet resultSet = preparedStatement.executeQuery()) {
                        // Create a DefaultTableModel to hold the data
                        DefaultTableModel model = new DefaultTableModel();
                        model.addColumn("TransactionId");
                        model.addColumn("teacherId");
                        model.addColumn("Teacher Name");
                        model.addColumn("Account no");
                        model.addColumn("Paid Amount");
                        model.addColumn("Payable Money");
                        model.addColumn("Month");
                        model.addColumn("Date");

                        // Populate the table model with data from the result set
                        while (resultSet.next()) {
                            Object[] rowData = new Object[8];
                            rowData[0] = resultSet.getInt("transactionid");
                            rowData[1] = resultSet.getInt("teacherId");
                            rowData[2] = resultSet.getString("teacherName");
                            rowData[3] = resultSet.getString("account_no");
                            rowData[4] = resultSet.getDouble("paidAmount");
                            rowData[5] = resultSet.getDouble("payable_money");
                            rowData[6] = resultSet.getString("transactionMonth");
                            rowData[7] = resultSet.getString("transactiondate");

                            model.addRow(rowData);
                        }

                        // Create the new JTable and set its model
                        JTable newTable = new JTable(model);

                        // Show the JTable in a new JFrame
                        JFrame frame = new JFrame("Transaction Information");
                        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                        frame.getContentPane().add(new JScrollPane(newTable));
                        frame.setSize(1000, 800);
                        frame.setLocationRelativeTo(null);

                        frame.setVisible(true);

                        DefaultTableCellRenderer cellRenderer = new DefaultTableCellRenderer() {
                            @Override
                            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                                Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                                c.setFont(new Font("Arial", Font.PLAIN, 18)); // Replace 18 with your desired font size
                                return c;
                            }
                        };

                        // Apply the custom TableCellRenderer to all columns in the table
                        for (int i = 0; i < newTable.getColumnCount(); i++) {
                            newTable.getColumnModel().getColumn(i).setCellRenderer(cellRenderer);
                        }
                    }
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }

        } else if (basedon == 2) {// for staff********************************************************************************************

            String sqlQuery = null;
            try (Connection connection = DriverManager.getConnection(jdbcUrl, username, password)) {
                // Prepare the SQL SELECT query with JOIN operation

                sqlQuery = "SELECT tt.transactionid, tt.staffId, CONCAT(st.staffFirstName, ' ', st.staffLastName) AS staffName, tt.account_no, tt.paidAmount, tt.payable_money, tt.transactionMonth, tt.transactiondate "
                        + "FROM TransactionTable tt "
                        + "INNER JOIN StaffTable st ON tt.staffId = st.staffId "
                        + "WHERE tt.account_no = '" + accountNo + "'";

                try (PreparedStatement preparedStatement = connection.prepareStatement(sqlQuery)) {
                    // Set the parameters for the prepared statement

                    try (ResultSet resultSet = preparedStatement.executeQuery()) {
                        // Create a DefaultTableModel to hold the data
                        DefaultTableModel model = new DefaultTableModel();
                        model.addColumn("TransactionId");
                        model.addColumn("Staff Id");
                        model.addColumn("Staff Name");
                        model.addColumn("Account no");
                        model.addColumn("Paid Amount");
                        model.addColumn("Payable Money");
                        model.addColumn("Month");
                        model.addColumn("Date");

                        // Populate the table model with data from the result set
                        while (resultSet.next()) {
                            Object[] rowData = new Object[8];
                            rowData[0] = resultSet.getInt("transactionid");
                            rowData[1] = resultSet.getInt("staffId");
                            rowData[2] = resultSet.getString("staffName");
                            rowData[3] = resultSet.getString("account_no");
                            rowData[4] = resultSet.getDouble("paidAmount");
                            rowData[5] = resultSet.getDouble("payable_money");
                            rowData[6] = resultSet.getString("transactionMonth");
                            rowData[7] = resultSet.getString("transactiondate");

                            model.addRow(rowData);
                        }

                        // Create the new JTable and set its model
                        JTable newTable = new JTable(model);

                        // Show the JTable in a new JFrame
                        JFrame frame = new JFrame("Transaction Information");
                        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                        frame.getContentPane().add(new JScrollPane(newTable));
                        frame.setSize(1000, 800);
                        frame.setLocationRelativeTo(null);

                        frame.setVisible(true);

                        DefaultTableCellRenderer cellRenderer = new DefaultTableCellRenderer() {
                            @Override
                            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                                Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                                c.setFont(new Font("Arial", Font.PLAIN, 18)); // Replace 18 with your desired font size
                                return c;
                            }
                        };

                        // Apply the custom TableCellRenderer to all columns in the table
                        for (int i = 0; i < newTable.getColumnCount(); i++) {
                            newTable.getColumnModel().getColumn(i).setCellRenderer(cellRenderer);
                        }
                    }
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }

        } else if (basedon == 3) { // for all student ***********************************************************************************************************
            String sqlQuery = null;
            try (Connection connection = DriverManager.getConnection(jdbcUrl, username, password)) {
                // Prepare the SQL SELECT query with JOIN operation

                sqlQuery = "SELECT tt.transactionid, tt.studentID, CONCAT(st.studentFirstName, ' ', st.studentLastName) AS studentName, tt.account_no, tt.paidAmount, tt.payable_money, tt.transactionMonth, tt.transactiondate "
                        + "FROM TransactionTable tt "
                        + "INNER JOIN StudentTable st ON tt.studentID = st.studentId "
                        + "WHERE tt.studentID IS NOT NULL";

                try (PreparedStatement preparedStatement = connection.prepareStatement(sqlQuery)) {
                    // Set the parameters for the prepared statement

                    try (ResultSet resultSet = preparedStatement.executeQuery()) {
                        // Create a DefaultTableModel to hold the data
                        DefaultTableModel model = new DefaultTableModel();
                        model.addColumn("TransactionId");
                        model.addColumn("StudenID");
                        model.addColumn("Student Name");
                        model.addColumn("Account no");
                        model.addColumn("Paid Amount");
                        model.addColumn("Payable Money");
                        model.addColumn("Month");
                        model.addColumn("Date");

                        // Populate the table model with data from the result set
                        while (resultSet.next()) {
                            Object[] rowData = new Object[8];
                            rowData[0] = resultSet.getInt("transactionid");
                            rowData[1] = resultSet.getInt("studentID");
                            rowData[2] = resultSet.getString("studentName");
                            rowData[3] = resultSet.getString("account_no");
                            rowData[4] = resultSet.getDouble("paidAmount");
                            rowData[5] = resultSet.getDouble("payable_money");
                            rowData[6] = resultSet.getString("transactionMonth");
                            rowData[7] = resultSet.getString("transactiondate");

                            model.addRow(rowData);
                        }

                        // Create the new JTable and set its model
                        JTable newTable = new JTable(model);

                        // Show the JTable in a new JFrame
                        JFrame frame = new JFrame("Transaction Information");
                        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                        frame.getContentPane().add(new JScrollPane(newTable));
                        frame.setSize(1000, 800);
                        frame.setLocationRelativeTo(null);

                        frame.setVisible(true);

                        DefaultTableCellRenderer cellRenderer = new DefaultTableCellRenderer() {
                            @Override
                            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                                Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                                c.setFont(new Font("Arial", Font.PLAIN, 18)); // Replace 18 with your desired font size
                                return c;
                            }
                        };

                        // Apply the custom TableCellRenderer to all columns in the table
                        for (int i = 0; i < newTable.getColumnCount(); i++) {
                            newTable.getColumnModel().getColumn(i).setCellRenderer(cellRenderer);
                        }
                    }
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }

        } else if (basedon == 4) { // all teacher *****************************************************************************************************
String sqlQuery = null;
            try (Connection connection = DriverManager.getConnection(jdbcUrl, username, password)) {
                // Prepare the SQL SELECT query with JOIN operation

                sqlQuery = "SELECT tt.transactionid, tt.teacherId, CONCAT(st.teacherFirstName, ' ', st.teacherLastName) AS teacherName, tt.account_no, tt.paidAmount, tt.payable_money, tt.transactionMonth, tt.transactiondate "
                        + "FROM TransactionTable tt "
                        + "INNER JOIN TeacherTable st ON tt.teacherId = st.teacherId "
                        + "WHERE tt.teacherId IS NOT NULL ";

                try (PreparedStatement preparedStatement = connection.prepareStatement(sqlQuery)) {
                    // Set the parameters for the prepared statement

                    try (ResultSet resultSet = preparedStatement.executeQuery()) {
                        // Create a DefaultTableModel to hold the data
                        DefaultTableModel model = new DefaultTableModel();
                        model.addColumn("TransactionId");
                        model.addColumn("teacherId");
                        model.addColumn("Teacher Name");
                        model.addColumn("Account no");
                        model.addColumn("Paid Amount");
                        model.addColumn("Payable Money");
                        model.addColumn("Month");
                        model.addColumn("Date");

                        // Populate the table model with data from the result set
                        while (resultSet.next()) {
                            Object[] rowData = new Object[8];
                            rowData[0] = resultSet.getInt("transactionid");
                            rowData[1] = resultSet.getInt("teacherId");
                            rowData[2] = resultSet.getString("teacherName");
                            rowData[3] = resultSet.getString("account_no");
                            rowData[4] = resultSet.getDouble("paidAmount");
                            rowData[5] = resultSet.getDouble("payable_money");
                            rowData[6] = resultSet.getString("transactionMonth");
                            rowData[7] = resultSet.getString("transactiondate");

                            model.addRow(rowData);
                        }

                        // Create the new JTable and set its model
                        JTable newTable = new JTable(model);

                        // Show the JTable in a new JFrame
                        JFrame frame = new JFrame("Transaction Information");
                        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                        frame.getContentPane().add(new JScrollPane(newTable));
                        frame.setSize(1000, 800);
                        frame.setLocationRelativeTo(null);

                        frame.setVisible(true);

                        DefaultTableCellRenderer cellRenderer = new DefaultTableCellRenderer() {
                            @Override
                            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                                Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                                c.setFont(new Font("Arial", Font.PLAIN, 18)); // Replace 18 with your desired font size
                                return c;
                            }
                        };

                        // Apply the custom TableCellRenderer to all columns in the table
                        for (int i = 0; i < newTable.getColumnCount(); i++) {
                            newTable.getColumnModel().getColumn(i).setCellRenderer(cellRenderer);
                        }
                    }
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        } else if (basedon == 5) { // all staff *****************************************************************************************************

            
             String sqlQuery = null;
            try (Connection connection = DriverManager.getConnection(jdbcUrl, username, password)) {
                // Prepare the SQL SELECT query with JOIN operation

                sqlQuery = "SELECT tt.transactionid, tt.staffId, CONCAT(st.staffFirstName, ' ', st.staffLastName) AS staffName, tt.account_no, tt.paidAmount, tt.payable_money, tt.transactionMonth, tt.transactiondate "
                        + "FROM TransactionTable tt "
                        + "INNER JOIN StaffTable st ON tt.staffId = st.staffId "
                        + "WHERE tt.staffId IS NOT NULL";

                try (PreparedStatement preparedStatement = connection.prepareStatement(sqlQuery)) {
                    // Set the parameters for the prepared statement

                    try (ResultSet resultSet = preparedStatement.executeQuery()) {
                        // Create a DefaultTableModel to hold the data
                        DefaultTableModel model = new DefaultTableModel();
                        model.addColumn("TransactionId");
                        model.addColumn("Staff Id");
                        model.addColumn("Staff Name");
                        model.addColumn("Account no");
                        model.addColumn("Paid Amount");
                        model.addColumn("Payable Money");
                        model.addColumn("Month");
                        model.addColumn("Date");

                        // Populate the table model with data from the result set
                        while (resultSet.next()) {
                            Object[] rowData = new Object[8];
                            rowData[0] = resultSet.getInt("transactionid");
                            rowData[1] = resultSet.getInt("staffId");
                            rowData[2] = resultSet.getString("staffName");
                            rowData[3] = resultSet.getString("account_no");
                            rowData[4] = resultSet.getDouble("paidAmount");
                            rowData[5] = resultSet.getDouble("payable_money");
                            rowData[6] = resultSet.getString("transactionMonth");
                            rowData[7] = resultSet.getString("transactiondate");

                            model.addRow(rowData);
                        }

                        // Create the new JTable and set its model
                        JTable newTable = new JTable(model);

                        // Show the JTable in a new JFrame
                        JFrame frame = new JFrame("Transaction Information");
                        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                        frame.getContentPane().add(new JScrollPane(newTable));
                        frame.setSize(1000, 800);
                        frame.setLocationRelativeTo(null);

                        frame.setVisible(true);

                        DefaultTableCellRenderer cellRenderer = new DefaultTableCellRenderer() {
                            @Override
                            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                                Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                                c.setFont(new Font("Arial", Font.PLAIN, 18)); // Replace 18 with your desired font size
                                return c;
                            }
                        };

                        // Apply the custom TableCellRenderer to all columns in the table
                        for (int i = 0; i < newTable.getColumnCount(); i++) {
                            newTable.getColumnModel().getColumn(i).setCellRenderer(cellRenderer);
                        }
                    }
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
            
            
        } else if (basedon == 6) { // all transaction *****************************************************************************************************

            
            String sqlQuery = null;
            try (Connection connection = DriverManager.getConnection(jdbcUrl, username, password)) {
                // Prepare the SQL SELECT query with JOIN operation

                sqlQuery = "SELECT t.transactionid, t.studentID, s.studentFirstName + ' ' + s.studentLastName AS studentName, " +
                    "t.teacherid, te.teacherFirstName + ' ' + te.teacherLastName AS teacherName, t.staffid, " +
                    "st.staffFirstName + ' ' + st.staffLastName AS staffName, t.account_no, t.paidAmount, t.payable_money, " +
                    "t.transactionMonth, t.transactiondate " +
                    "FROM TransactionTable t " +
                    "LEFT JOIN StudentTable s ON t.studentID = s.studentId " +
                    "LEFT JOIN TeacherTable te ON t.teacherid = te.teacherId " +
                    "LEFT JOIN StaffTable st ON t.staffid = st.staffId";
                
                try (PreparedStatement preparedStatement = connection.prepareStatement(sqlQuery)) {
                    // Set the parameters for the prepared statement

                    try (ResultSet resultSet = preparedStatement.executeQuery()) {
                        // Create a DefaultTableModel to hold the data
                        DefaultTableModel model = new DefaultTableModel();
                        model.addColumn("TransactionId");
                        model.addColumn("Student Id");
                        model.addColumn("Student Name");
                        model.addColumn("Teacher Id");
                        model.addColumn("Teacher Name");
                        model.addColumn("Staff Id");
                        model.addColumn("Staff Name");
                        model.addColumn("Account no");
                        model.addColumn("Paid Amount");
                        model.addColumn("Payable Money");
                        model.addColumn("Month");
                        model.addColumn("Date");

                        // Populate the table model with data from the result set
                        while (resultSet.next()) {
                            Object[] rowData = new Object[12];
                            rowData[0] = resultSet.getInt("transactionid");
                            rowData[1] = resultSet.getInt("studentId");
                            rowData[2] = resultSet.getString("studentName");
                            rowData[3] = resultSet.getInt("teacherId");
                            rowData[4] = resultSet.getString("teacherName");
                            rowData[5] = resultSet.getInt("staffId");
                            rowData[6] = resultSet.getString("staffName");
                            rowData[7] = resultSet.getString("account_no");
                            rowData[8] = resultSet.getDouble("paidAmount");
                            rowData[9] = resultSet.getDouble("payable_money");
                            rowData[10] = resultSet.getString("transactionMonth");
                            rowData[11] = resultSet.getString("transactiondate");

                            model.addRow(rowData);
                        }

                        // Create the new JTable and set its model
                        JTable newTable = new JTable(model);

                        // Show the JTable in a new JFrame
                        JFrame frame = new JFrame("Transaction Information");
                        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                        frame.getContentPane().add(new JScrollPane(newTable));
                        frame.setSize(1000, 800);
                        frame.setLocationRelativeTo(null);

                        frame.setVisible(true);

                        DefaultTableCellRenderer cellRenderer = new DefaultTableCellRenderer() {
                            @Override
                            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                                Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                                c.setFont(new Font("Arial", Font.PLAIN, 18)); // Replace 18 with your desired font size
                                return c;
                            }
                        };

                        // Apply the custom TableCellRenderer to all columns in the table
                        for (int i = 0; i < newTable.getColumnCount(); i++) {
                            newTable.getColumnModel().getColumn(i).setCellRenderer(cellRenderer);
                        }
                    }
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
            
            
        }


    }//GEN-LAST:event_btnSeePaymentsActionPerformed


    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        frameADMINHomePage adminhp = new frameADMINHomePage();
        adminhp.setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        framePaymentbyADMIN paymentbyADMIN = new framePaymentbyADMIN();
        paymentbyADMIN.setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void tfAccountNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfAccountNoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfAccountNoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frameManagePaymentbyADMIN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frameManagePaymentbyADMIN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frameManagePaymentbyADMIN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frameManagePaymentbyADMIN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frameManagePaymentbyADMIN().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSeePayments;
    private javax.swing.JComboBox<String> comboBasedOn;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel lblBackground;
    private javax.swing.JTextField tfAccountNo;
    // End of variables declaration//GEN-END:variables
}
